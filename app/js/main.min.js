/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/src/js/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	// Canvas
	__webpack_require__(2);
	
	// User interaction elements - tbh this is more like "main.js"
	__webpack_require__(3);

/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	
	// background contains the static canvas elements
	var background = document.getElementById("static");
	var backgroundContext = background.getContext("2d");
	
	// Settings for the background - move out to a separate file
	var settings = {
	    backgroundColor: "#8CD1E6",
	    pathColor: "gray"
	};
	
	// Drawing the background
	backgroundContext.fillStyle = settings.backgroundColor;
	backgroundContext.fillRect(0, 0, background.width, background.height);
	
	/* Main path will go from [0, 500], [75, 500], [75, 100], [225, 100], [225, 500], [375, 500], [375, 100], [525, 100], [525, 500], [675, 500], [675, 100], [825, 100], [825, 500], [900, 500] */
	
	// Drawing the path - width of the path is 50px
	backgroundContext.fillStyle = settings.pathColor;
	
	backgroundContext.beginPath();
	
	// For the bottom part of the path
	backgroundContext.moveTo(0, 525);
	
	backgroundContext.lineTo(100, 525);
	backgroundContext.lineTo(100, 125); // Top
	backgroundContext.lineTo(200, 125);
	backgroundContext.lineTo(200, 525); // Bottom
	backgroundContext.lineTo(400, 525);
	backgroundContext.lineTo(400, 125); // Top
	backgroundContext.lineTo(500, 125);
	backgroundContext.lineTo(500, 525); // Bottom
	backgroundContext.lineTo(700, 525);
	backgroundContext.lineTo(700, 125); // Top
	backgroundContext.lineTo(800, 125);
	backgroundContext.lineTo(800, 525); // Bottom
	
	//Middle section to the side
	backgroundContext.lineTo(900, 525);
	backgroundContext.lineTo(900, 475);
	backgroundContext.lineTo(850, 475);
	
	// For the top part of the path
	backgroundContext.lineTo(850, 75);
	backgroundContext.lineTo(650, 75);
	backgroundContext.lineTo(650, 475);
	backgroundContext.lineTo(550, 475);
	backgroundContext.lineTo(550, 75);
	backgroundContext.lineTo(350, 75);
	backgroundContext.lineTo(350, 475);
	backgroundContext.lineTo(250, 475);
	backgroundContext.lineTo(250, 75);
	backgroundContext.lineTo(50, 75);
	backgroundContext.lineTo(50, 475);
	
	// End section
	backgroundContext.lineTo(0, 475);
	
	backgroundContext.fill();
	// backgroundContext.lineTo();
	
	// draw a grid (for development purposes)
	var width = 900,
	    height = 600;
	// draw vertical lines
	for (var i = 0; i < width; i += 25) {
	    backgroundContext.moveTo(i, 0);
	    backgroundContext.lineTo(i, height);
	    backgroundContext.stroke();
	}
	// draw horizontal lines
	for (var i = 0; i < height; i += 25) {
	    backgroundContext.moveTo(0, i);
	    backgroundContext.lineTo(width, i);
	    backgroundContext.stroke();
	}

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	// Initiate all the components
	var Tower = __webpack_require__(4),
	    GameEngine = __webpack_require__(10);
	
	// Import and declare utility functions
	
	var _require = __webpack_require__(6),
	    compileTemplate = _require.compileTemplate,
	    getTowerData = _require.getTowerData,
	    getTowerEffects = _require.getTowerEffects,
	    getMonsterTypeInfo = _require.getMonsterTypeInfo,
	    addClass = _require.addClass,
	    removeClass = _require.removeClass,
	    convertPositionToTower = _require.convertPositionToTower;
	
	var constants = __webpack_require__(7),
	    towerData = __webpack_require__(5);
	
	// Import templates
	var baseModalTemplate = __webpack_require__(15),
	    actionsTemplate = __webpack_require__(16),
	    informationPanelTemplate = __webpack_require__(17),
	    upgradePanelTemplate = __webpack_require__(18),
	    towerInfoTemplate = __webpack_require__(19),
	    towerCardTemplate = __webpack_require__(20);
	
	// Cache reused DOM elements
	var infoName = document.getElementById("info-name"),
	    infoIcon = document.getElementById("info-icon"),
	    infoBox1 = document.getElementById("info-box-1"),
	    infoBox2 = document.getElementById("info-box-2"),
	    infoBox3 = document.getElementById("info-box-3"),
	    infoBox4 = document.getElementById("info-box-4"),
	    levelInfo = document.getElementById("level"),
	    goldInfo = document.getElementById("gold"),
	    livesInfo = document.getElementById("lives");
	
	var towerCards = void 0,
	    towerCardList = [];
	
	/*
	Create state variables - These are modified on user interaction events
	State variables
	activeCanvasElement - Changed on a mouse click event on a monster, tower or nothing
	activeTowerSelected - The name of the tower that is being placed by the user
	activeMessage - Message displayed in the canvas (can be used for new levels, invalid tower placements, etc)
	canvasMousePosition -
	    onCanvas - boolean to represent whether the mouse is currently on the canvas
	    towerPosition - object with a grid value and coordinate value and sides
	        grid - the top left block of the tower being placed - towers are a 2x2 grid
	        coordinate - the top left corner coordinate
	        sides - 50 px
	    mousePosition - the current mouse coordinates
	*/
	
	var activeCanvasElement = { type: null },
	    activeTowerSelected = null,
	    activeMessage = { message: null },
	    canvasMousePosition = {
	    onCanvas: false,
	    towerPosition: {},
	    mousePosition: {}
	};
	
	//  creates global variables
	window.game = new GameEngine(); // Privatize this later
	// For development - get looooots of gold
	game.userGold = 10000;
	window.dynamicCanvas = document.getElementById('dynamic');
	window.dynamicContext = dynamicCanvas.getContext('2d');
	showStartModal();
	updateInformationPanel();
	renderTowerPanel();
	
	// Declare the game loop
	var lastTime = void 0;
	function gameLoop() {
	    var now = Date.now();
	
	    var dt = (now - lastTime) / 1000.0; // Convert to seconds
	
	    // Limit the dt so that when the browser changes tabs the game is paused - change this so that execution continues and only rendering stops?
	    dt = Math.min(dt, 0.5); // Max dt is half a second
	
	    game.runCycle(dt);
	
	    // Renders methods based on state variables
	    game.render(activeCanvasElement);
	    renderInterface(dt);
	
	    lastTime = now;
	    if (game.state === "playing") {
	        requestAnimationFrame(gameLoop);
	    } else {
	        showGameFinishedModal(game.state === "won");
	    }
	}
	/* =================== Modal functions =================*/
	/* =====================================================*/
	function showModal(html) {
	    var background = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	    // create modal element and attach to dom
	    var modalContainer = document.createElement('div'),
	        modal = document.createElement('div');
	
	    modalContainer.className = "modal-container";
	    modal.id = "mainModal";
	    modal.className = "modal-content card-pane";
	    modal.style.display = "block";
	    modal.innerHTML = html;
	    modal.addEventListener("click", modalClick);
	
	    //create modal background and attach to dom
	    var modalBackground = document.createElement('div');
	    modalBackground.className = "modal-background";
	
	    if (background) {
	        document.body.appendChild(modalBackground);
	    } else {
	        modal.className += " tower-info";
	    }
	    modalContainer.appendChild(modal);
	    document.body.appendChild(modalContainer);
	}
	
	function removeModal() {
	    var modalElem = document.getElementById("mainModal");
	    modalElem.removeEventListener("click", modalClick);
	    var modalBackgroundElem = document.getElementsByClassName("modal-background")[0];
	    var modalContainer = document.getElementsByClassName("modal-container")[0];
	    if (modalContainer) {
	        document.body.removeChild(modalContainer);
	    };
	    if (modalBackgroundElem) {
	        document.body.removeChild(modalBackgroundElem);
	    };
	}
	
	function showStartModal() {
	    var actions = [{
	        action: "start",
	        name: "Start Game"
	    }, {
	        action: "information",
	        name: "Information"
	    }];
	
	    var actionHtml = actions.reduce(function (prevAction, action) {
	        return prevAction + compileTemplate(actionsTemplate, action);
	    }, "");
	
	    var startModal = compileTemplate(baseModalTemplate, {
	        title: "Welcome to Awesome TD!",
	        content: "<p>This is text and image describing the game - it will be informative and interesting. Clicking start game will start the game, clicking information will show information about the game and how to play - will override this div (don't need to show this anymore).\n        On game reset this modal-content container will show and prompt to restart game.</p>",
	        actions: actionHtml
	    });
	
	    showModal(startModal);
	}
	
	function showGameFinishedModal(gameWon) {
	    var title = gameWon ? "Congratulations, you won!" : "Better luck next time",
	        actionHtml = compileTemplate(actionsTemplate, {
	        action: "restart",
	        name: "Restart Game"
	    });
	
	    var gameFinishedModal = compileTemplate(baseModalTemplate, {
	        title: title,
	        content: "<p>Game is over. Do you want to play again?</p>",
	        actions: actionHtml
	    });
	
	    showModal(gameFinishedModal);
	}
	
	function showInformationModal() {
	    var actions = [{
	        action: "start",
	        name: "Start Game"
	    }];
	
	    var actionHtml = actions.reduce(function (prevAction, action) {
	        return prevAction + compileTemplate(actionsTemplate, action);
	    }, "");
	
	    var actionModal = compileTemplate(baseModalTemplate, {
	        title: "Information",
	        content: "<p>Monsters are trying to reach the end of the path!!! It's your job to stop them. Luckily for you, you have " + constants.STARTINGGOLD + " gold lying around to buy towers. Monsters spawn from the left size of the screen and run along the grey path to reach the right side of the path. Every 10 levels, there are stronger monsters that spawn which are harder to take down. Good luck!</p>",
	        actions: actionHtml,
	        footerActions: ""
	    });
	
	    showModal(actionModal);
	}
	
	// At the moment expects only towers with upgrades should be able to access this
	function showUpgradeModal(towerIndex) {
	    var towerId = game.towers[towerIndex].id,
	        upgrades = towerData[towerId].upgrade,
	        columnSpacing = upgrades.length === 1 ? "s6 offset-s3" : "s6";
	
	    var modalContent = upgrades.reduce(function (prevUpgrade, upgradeObj) {
	        var towerInfo = getTowerData(upgradeObj.name),
	            actions = compileTemplate(actionsTemplate, {
	            action: "upgrade",
	            name: upgradeObj.name,
	            extraData: "data-upgradename='" + upgradeObj.name + "'"
	        });
	
	        var upgradeContent = compileTemplate(towerInfoTemplate, {
	            towerDmg: towerInfo.projectile.damage,
	            towerTravel: towerInfo.projectile.travelTime,
	            towerCost: towerInfo.goldCost,
	            towerSpeed: towerInfo.attackSpeed,
	            towerRange: towerInfo.range,
	            towerTargets: towerInfo.targets,
	            towerEffect: getTowerEffects(towerInfo),
	            towerType: towerInfo.projectile.type
	        });
	
	        return prevUpgrade + compileTemplate(upgradePanelTemplate, {
	            spacing: columnSpacing,
	            imageSrc: "./assets/tower.jpg",
	            title: upgradeObj.name + " Tower",
	            content: upgradeContent,
	            actions: actions
	        });
	    }, "");
	
	    var upgradeModal = compileTemplate(baseModalTemplate, {
	        title: "Upgrade Tower",
	        content: modalContent,
	        actions: "",
	        footerActions: compileTemplate(actionsTemplate, {
	            action: "close",
	            name: "Close"
	        })
	    });
	
	    showModal(upgradeModal);
	}
	
	/* ================== Render functions =================*/
	/* =====================================================*/
	function renderInterface(dt) {
	    updateGameDependentInformation();
	    renderTowerPlacement();
	    renderMessage(dt);
	}
	
	function updateGameDependentInformation() {
	    livesInfo.innerHTML = game.userLives;
	    goldInfo.innerHTML = game.userGold;
	    levelInfo.innerHTML = game.level;
	
	    if (activeCanvasElement.type === "monster") {
	        document.getElementById("monsterHp").innerHTML = Math.floor(game.activeMonsters[activeCanvasElement.index].currentHp);
	    } else if (activeCanvasElement.type === "tower") {
	        // Add any relevant tower information here
	    }
	}
	
	function renderTowerPanel() {
	    var towerHtml = '';
	
	    for (var key in towerData) {
	        if (towerData[key].primary) {
	            towerHtml += compileTemplate(towerCardTemplate, {
	                name: key,
	                imageSource: towerData[key].icon
	            });
	        }
	    }
	
	    document.getElementById("tower-panel").innerHTML = towerHtml;
	    // Store towerCards into module variables
	    towerCards = Array.prototype.slice.call(document.getElementsByClassName("tower-card"));
	}
	
	// Moved this outside of the gameLoop, will only update the relevant data when necessary
	function updateInformationPanel() {
	    var sectionHtml = void 0;
	    if (activeCanvasElement.type === "monster") {
	        sectionHtml = renderMonsterInformation(activeCanvasElement.index);
	    } else if (activeCanvasElement.type === "tower") {
	        sectionHtml = renderTowerInformation(activeCanvasElement.index);
	    } else {
	        sectionHtml = renderDefaultInformation();
	    }
	    document.getElementById("informationPanel").innerHTML = sectionHtml;
	}
	
	function renderMonsterInformation(index) {
	    var currentHp = Math.floor(game.activeMonsters[index].currentHp),
	        maxHp = game.activeMonsters[index].maxHp,
	        type = game.activeMonsters[index].type,
	        id = game.activeMonsters[index].id,
	        moveSpeed = game.activeMonsters[index].baseMs,
	        _getMonsterTypeInfo = getMonsterTypeInfo(type),
	        strengths = _getMonsterTypeInfo.strengths,
	        weaknesses = _getMonsterTypeInfo.weaknesses;
	
	
	    var content = "\n    <div class=\"row\">\n        <div class=\"col s6 info-box\">\n            <div class=\"capitalize\">HP: <span id='monsterHp'>" + currentHp + "</span> / " + maxHp + "</div>\n            <div class=\"capitalize\">Base Movespeed: " + moveSpeed + "</div>\n        </div>\n        <div class=\"col s6 info-box\">\n            <div class=\"capitalize\">Type: " + type + "</div>\n            <div class=\"capitalize\">Strengths: " + strengths + "</div>\n            <div class=\"capitalize\">Weaknesses: " + weaknesses + "</div>\n        </div>\n    </div>\n    ";
	    return compileTemplate(informationPanelTemplate, {
	        title: id,
	        imagePath: "./assets/biggermonster.jpg",
	        content: content
	    });
	}
	
	function renderTowerInformation(index) {
	    var id = game.towers[index].id,
	        towerInfo = getTowerData(id),
	        upgradeAvailable = towerInfo.upgrade.length !== 0;
	    var actions = void 0;
	
	    if (upgradeAvailable) {
	        actions = [{ action: "upgrade", name: "Upgrade" }, { action: "sell", name: "Sell" }];
	    } else {
	        actions = [{ action: "sell", name: "Sell" }];
	    }
	
	    var content = actions.reduce(function (prevAction, action) {
	        return prevAction + compileTemplate(actionsTemplate, action);
	    }, "");
	
	    content += compileTemplate(towerInfoTemplate, {
	        towerDmg: towerInfo.projectile.damage,
	        towerTravel: towerInfo.projectile.travelTime,
	        towerCost: towerInfo.goldCost,
	        towerSpeed: towerInfo.attackSpeed,
	        towerRange: towerInfo.range,
	        towerTargets: towerInfo.targets,
	        towerEffect: getTowerEffects(towerInfo),
	        towerType: towerInfo.projectile.type
	    });
	
	    return compileTemplate(informationPanelTemplate, {
	        title: id,
	        imagePath: "./assets/biggermonster.jpg",
	        content: content
	    });
	}
	
	function renderDefaultInformation() {
	    return compileTemplate(informationPanelTemplate, {
	        title: "Awesome TD",
	        imagePath: "./assets/biggermonster.jpg",
	        content: "\n        <p>Have fun playing this game!</p>\n        "
	    });
	}
	
	function renderMessage(dt) {
	    if (activeMessage.message === null) {
	        return;
	    } else {
	        dynamicContext.globalAlpha = activeMessage.timer > 0 ? activeMessage.timer : 0; // Sets transparency to 0 if a negative number
	        dynamicContext.font = constants.MESSAGEFONT;
	        dynamicContext.textAlign = "center";
	        dynamicContext.fillStyle = constants.MESSAGECOLOR;
	        dynamicContext.fillText(activeMessage.message, constants.CANVASWIDTH / 2, 50);
	        dynamicContext.globalAlpha = 1;
	
	        if (activeMessage.timer <= 0) {
	            activeMessage = { message: null }; // Reset message
	        } else {
	            activeMessage.timer -= dt;
	        }
	    }
	}
	
	function renderTowerPlacement() {
	    if (activeTowerSelected === null || !canvasMousePosition.onCanvas) {
	        return;
	    };
	
	    var towerData = getTowerData(activeTowerSelected);
	    var coordinates = canvasMousePosition.towerPosition.coordinates;
	
	    dynamicContext.beginPath();
	    dynamicContext.globalAlpha = 0.5;
	
	    // Draw grid validation placement
	    if (game.validateTowerPlacement(canvasMousePosition.towerPosition.grid)) {
	        dynamicContext.fillStyle = 'green';
	    } else {
	        dynamicContext.fillStyle = "red";
	    }
	    dynamicContext.fillRect(coordinates.x, coordinates.y, constants.TOWERLENGTH, constants.TOWERLENGTH);
	
	    // Draw tower - replace this with a sprite
	    dynamicContext.globalAlpha = 0.7;
	    dynamicContext.arc(coordinates.x + constants.TOWERLENGTH / 2, coordinates.y + constants.TOWERLENGTH / 2, constants.TOWERLENGTH * 0.5, 0, 2 * Math.PI, false);
	    dynamicContext.fillStyle = towerData.color;
	    dynamicContext.fill();
	
	    // Draw tower radius
	    dynamicContext.globalAlpha = 0.3;
	    dynamicContext.arc(coordinates.x, coordinates.y, towerData.range, 0, 2 * Math.PI);
	    dynamicContext.fillStyle = 'gray';
	    dynamicContext.fill();
	
	    dynamicContext.globalAlpha = 1;
	    dynamicContext.closePath();
	}
	
	/* ================ UI Event Listeners =================*/
	/* =====================================================*/
	/*
	These event listeners control the application by interacting with the game
	object and by changing the state variables (which the render functions use
	to read)
	*/
	towerCards.forEach(function (towerCard) {
	    towerCardList.push(towerCard.getAttribute("data-tower"));
	    towerCard.addEventListener("click", towerCardClick);
	    addHoverInformation(towerCard);
	});
	
	document.getElementById("dynamic").onmousemove = onCanvasMouseMovement;
	document.getElementById("dynamic").addEventListener("click", canvasClick);
	
	document.onkeydown = function (e) {
	    if (e.keyCode === 27) {
	        cancelTowerPlacement();
	    }
	};
	
	// updates activeCanvasElement when monster death or tower removed affects the current selected target
	document.addEventListener("unitRemoved", function (e) {
	    // Updates if the active element is the same as the type of unit removed
	    if (activeCanvasElement.type === e.detail.element) {
	        if (e.detail.index < activeCanvasElement.index) {
	            activeCanvasElement.index--; // Update positioning in element
	        } else if (e.detail.index === activeCanvasElement.index) {
	            activeCanvasElement = { type: null }; // Reset
	        }
	        updateInformationPanel();
	    }
	});
	
	// Adds event listeners only to the info box
	document.getElementsByClassName("side-section left")[0].addEventListener("click", function (e) {
	    if (activeCanvasElement.type === "tower") {
	        var clickTarget = e.target.getAttribute("data-action");
	        switch (clickTarget) {
	            case "upgrade":
	                showUpgradeModal(activeCanvasElement.index);
	                break;
	            case "sell":
	                sellTower(activeCanvasElement.index);
	                break;
	            case null:
	                return;
	            default:
	                console.log("Uncaught data attribute in side section action", clickTarget);
	        }
	    }
	});
	
	/* =================== UI Functions ====================*/
	/* =====================================================*/
	function modalClick(e) {
	    var clickTarget = e.target.getAttribute("data-action");
	
	    switch (clickTarget) {
	        case "start":
	            startGame();
	            break;
	        case "restart":
	            restartGame();
	            break;
	        case "information":
	            showInformationModal();
	            break;
	        case "upgrade":
	            var upgradeName = e.target.getAttribute("data-upgradename");
	            upgradeTower(activeCanvasElement.index, upgradeName);
	            break;
	        case "close":
	            break;
	        case null:
	            return;
	        default:
	            console.log("Uncaught data attribute in modal action", clickTarget);
	            return;
	    }
	    removeModal();
	}
	
	function addHoverInformation(towerCard) {
	    var hoverContainer = document.createElement('div'),
	        towerType = towerCard.getAttribute("data-tower"),
	        towerInfo = towerData[towerType];
	
	    hoverContainer.className = "tower-info-panel card";
	    hoverContainer.innerHTML = compileTemplate(towerInfoTemplate, {
	        title: towerType + " Tower",
	        towerDmg: towerInfo.projectile.damage,
	        towerTravel: towerInfo.projectile.travelTime,
	        towerCost: towerInfo.goldCost,
	        towerSpeed: towerInfo.attackSpeed,
	        towerRange: towerInfo.range,
	        towerTargets: towerInfo.targets,
	        towerEffect: getTowerEffects(towerInfo),
	        towerType: towerInfo.projectile.type
	    });
	
	    towerCard.appendChild(hoverContainer);
	}
	
	function restartGame() {
	    game.setDefaults();
	    startGame();
	}
	
	function startGame() {
	    game.gameStart();
	    // Sets up game loop and render loop
	    lastTime = Date.now();
	    gameLoop();
	}
	
	/* Click event listener on the tower cards
	Used to control what tower is being actively placed on the canvas
	4 possible flows based on the state of the interface
	1) The tower that was clicked is currently disabled:
	    -> function returns
	2) No towers are actively being placed
	    -> the clicked tower card now becomes the active tower being placed
	3) The clicked tower is the same as the tower actively being placed
	    -> the state is reset so that no towers are actively being placed
	4) The clicked tower is different from the tower actively being placed
	    -> the state is changed to the clicked tower becoming the active tower
	*/
	function towerCardClick() {
	    var towerName = this.getAttribute("data-tower"),
	        oldTowerIndex = towerCardList.indexOf(activeTowerSelected),
	        newTowerIndex = towerCardList.indexOf(towerName);
	
	    if (/disabled/i.test(this.className)) {
	        return;
	    } else if (activeTowerSelected === null) {
	        activeTowerSelected = towerName;
	        addClass(towerCards[newTowerIndex], "active");
	        canvasMousePosition.onCanvas = false;
	    } else if (activeTowerSelected === towerName) {
	        cancelTowerPlacement();
	        canvasMousePosition.onCanvas = false;
	    } else {
	        removeClass(towerCards[oldTowerIndex], "active");
	        activeTowerSelected = towerName;
	        addClass(towerCards[newTowerIndex], "active");
	        canvasMousePosition.onCanvas = false;
	    }
	}
	
	/*
	Called from towerCardClick (when clicking the active tower card) and on an escape key press
	Resets the active tower placement state to null
	*/
	function cancelTowerPlacement() {
	    removeClass(towerCards[towerCardList.indexOf(activeTowerSelected)], "active");
	    activeTowerSelected = null;
	}
	
	/* Mouse move event listener on the canvas
	If the active tower selected state (a tower is being placed by the user):
	    -> update the position of the mouse on the canvas (used by the renderTowerPlacement function)
	otherwise:
	    -> do nothing
	*/
	function onCanvasMouseMovement(e) {
	    if (activeTowerSelected === null) {
	        return;
	    };
	
	    var canvasContainer = this.getBoundingClientRect(),
	        position = {};
	
	    position.x = e.clientX - canvasContainer.left;
	    position.y = e.clientY - canvasContainer.top;
	    canvasMousePosition.mousePosition = position;
	    canvasMousePosition.towerPosition = convertPositionToTower(position);
	    canvasMousePosition.onCanvas = true;
	};
	
	/* Click event listener on the canvas
	Handles two possible canvas click scenarios
	1) A tower is selected and is actively being placed
	    -> Clicking will validate the tower placement and check the user's gold
	    if both are valid, will tower will be placed (by game object)
	    otherwise, an error message will show up
	2) A tower is not selected and is not being placed
	    -> Will check whether the click position overlaps with the bounding
	    rectangle of monster or tower - if so, it will return the information
	    in the information container
	*/
	function canvasClick(e) {
	    // Get click location relative to the canvas element
	    var canvasContainer = this.getBoundingClientRect(),
	        position = {},
	        towerGridPosition = canvasMousePosition.towerPosition.grid,
	        towerCoordinates = canvasMousePosition.towerPosition.coordinates; // Passes in grid blocks - this is the topLeft block
	
	    position.x = e.clientX - canvasContainer.left;
	    position.y = e.clientY - canvasContainer.top;
	
	    // Runs if the user is placing a tower
	    if (activeTowerSelected !== null) {
	        var towerName = activeTowerSelected,
	            towerPlaced = game.placeTower(towerName, towerGridPosition, towerCoordinates);
	
	        // If the tower was not placed, show an error message
	        if (!towerPlaced.placed) {
	            activeMessage = {
	                message: towerPlaced.message,
	                timer: constants.MESSAGEDURATION // seconds
	            };
	        }
	
	        removeClass(towerCards[towerCardList.indexOf(activeTowerSelected)], "active");
	        activeTowerSelected = null;
	    } else {
	        // User is not running a tower placement
	        activeCanvasElement = game.checkClickLocation(position);
	        updateInformationPanel();
	    }
	}
	
	function sellTower(towerIndex) {
	    var sellPrice = game.sellTower(towerIndex);
	    activeMessage = {
	        message: constants.MESSAGETOWERSOLD + sellPrice + " Gold",
	        timer: constants.MESSAGEDURATION // seconds
	    };
	    updateInformationPanel();
	}
	
	function upgradeTower(towerIndex, upgradeName) {
	    var upgraded = game.upgradeTower(towerIndex, upgradeName);
	    if (upgraded) {
	        updateInformationPanel();
	    } else {
	        activeMessage = {
	            message: constants.MESSAGENOTENOUGHGOLD,
	            timer: constants.MESSAGEDURATION // seconds
	        };
	    }
	}

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var towerData = __webpack_require__(5),
	    _require = __webpack_require__(6),
	    getPositionDifference = _require.getPositionDifference,
	    Projectile = __webpack_require__(9),
	    constants = __webpack_require__(7);
	
	// Position refers to the upper left corner of the elements
	// Tower width - 50 x 50
	var Tower = function Tower(position, id) {
	    if (towerData[id] === undefined) {
	        throw new Error("Invalid tower name, check html dataattribute or towerdata");
	    }
	    var loadedTowerData = towerData[id];
	    this.id = id;
	    this.attackSpeed = loadedTowerData.attackSpeed; // Attack speed
	    this.cooldown = 0;
	    this.range = loadedTowerData.range; // Range of the tower
	    this.effects = loadedTowerData.effects; // Special effect (e.g. slow, splash, etc)
	    this.goldCost = loadedTowerData.goldCost;
	    this.totalCost = loadedTowerData.totalCost;
	    this.upgrade = loadedTowerData.upgrade;
	    this.targets = loadedTowerData.targets;
	    this.position = position; // object with x and y coordinates - references the top left corner of the tower
	    this.position.sideLength = constants.TOWERLENGTH;
	    this.renderColor = loadedTowerData.color;
	};
	// Method the game object uses to run towers
	Tower.prototype.runCycle = function (activeMonsters, dt) {
	    var _this = this;
	
	    if (this.cooldown < 0) {
	        // Creates projectiles up to the number of targets specified by the tower
	        var firedShots = 0;
	        activeMonsters.forEach(function (monster) {
	            if (_this.checkInRange(monster.position) && firedShots < _this.targets) {
	                monster.projectiles.push(new Projectile(_this.id, _this.position));
	                firedShots++;
	            }
	        });
	
	        this.cooldown = this.attackSpeed;
	    }
	
	    if (this.cooldown >= 0) {
	        this.cooldown -= dt;
	    }
	};
	
	// Takes in a monster's position and checks whether that is in range based on the range - returns true or false if in range which can be used to
	Tower.prototype.checkInRange = function (monsterPosition) {
	    // using sqrt((x2-x1)^2 - (y2-y1)^2)
	    var monsterDistance = getPositionDifference(monsterPosition, this.position);
	
	    if (monsterDistance <= this.range) {
	        return true;
	    } else {
	        return false;
	    }
	};
	
	// TODO figure out a better way to render towers
	Tower.prototype.draw = function (active) {
	    // Render tower - replace this with a sprite
	    dynamicContext.beginPath();
	    dynamicContext.arc(this.position.x + constants.TOWERLENGTH / 2, this.position.y + constants.TOWERLENGTH / 2, constants.TOWERLENGTH * 0.5, 0, 2 * Math.PI);
	    dynamicContext.fillStyle = this.renderColor;
	    dynamicContext.fill();
	    // Draw range radius
	    if (active) {
	        dynamicContext.globalAlpha = 0.3;
	        dynamicContext.fillStyle = 'gray';
	        dynamicContext.arc(this.position.x, this.position.y, this.range, 0, 2 * Math.PI);
	        dynamicContext.fill();
	
	        dynamicContext.globalAlpha = 1;
	    }
	    dynamicContext.closePath();
	};
	
	module.exports = Tower;

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	
	// This should probably be in a database
	module.exports = {
	    // Basic tower tree here
	    basic: {
	        projectile: {
	            damage: 5,
	            travelTime: 0.5, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal", //
	            effects: {}
	        },
	        primary: true,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 1, // 1 second per attack
	        range: 300,
	        goldCost: 10,
	        totalCost: 10, // Used for upgraded towers
	        upgrade: [{
	            name: "advanced"
	        }, {
	            name: "multishot"
	        }],
	        color: 'green'
	    },
	    advanced: {
	        projectile: {
	            damage: 15,
	            travelTime: 0.5, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {}
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 20,
	        totalCost: 30,
	        upgrade: [{
	            name: "expert"
	        }],
	        color: 'green'
	    },
	    expert: {
	        projectile: {
	            damage: 45,
	            travelTime: 0.5, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {}
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 60,
	        totalCost: 90,
	        upgrade: [],
	        color: 'green'
	    },
	    multishot: {
	        projectile: {
	            damage: 5,
	            travelTime: 0.5, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {}
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 3,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 20,
	        totalCost: 30,
	        upgrade: [{
	            name: "expertMultishot"
	        }],
	        color: 'green'
	    },
	    expertMultishot: {
	        projectile: {
	            damage: 30,
	            travelTime: 0.5, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {}
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 4,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 100,
	        totalCost: 130,
	        upgrade: [],
	        color: 'green'
	    },
	
	    // Heavy tower tree here
	    heavy: {
	        projectile: {
	            damage: 15,
	            travelTime: 0.8, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "siege",
	            effects: {}
	        },
	        primary: true,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 2,
	        range: 250,
	        goldCost: 10,
	        totalCost: 10,
	        upgrade: [{
	            name: "siege"
	        }, {
	            name: "cannon"
	        }],
	        color: 'black'
	    },
	    siege: {
	        projectile: {
	            damage: 40,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "siege",
	            effects: {}
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 2,
	        range: 350,
	        goldCost: 30,
	        totalCost: 40,
	        upgrade: [{
	            name: "demolition"
	        }, {
	            name: "explosion"
	        }],
	        color: 'black'
	    },
	    demolition: {
	        projectile: {
	            damage: 100,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "siege",
	            effects: {}
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 1.5,
	        range: 500,
	        goldCost: 100,
	        totalCost: 140,
	        upgrade: [],
	        color: 'black'
	    },
	    explosion: {
	        projectile: {
	            damage: 60,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "siege",
	            effects: {
	                splash: {
	                    radius: 200
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 1.5,
	        range: 500,
	        goldCost: 100,
	        totalCost: 140,
	        upgrade: [],
	        color: 'black'
	    },
	    cannon: {
	        projectile: {
	            damage: 20,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "siege",
	            effects: {
	                amplify: {
	                    amount: 1.5,
	                    timer: 3
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 1,
	        range: 350,
	        goldCost: 30,
	        totalCost: 40,
	        upgrade: [{
	            name: "shrapnel"
	        }, {
	            name: "artillery"
	        }],
	        color: 'black'
	    },
	    shrapnel: {
	        projectile: {
	            damage: 40,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "siege",
	            effects: {
	                amplify: {
	                    amount: 1.5,
	                    timer: 3
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 3,
	        attackSpeed: 1,
	        range: 350,
	        goldCost: 80,
	        totalCost: 120,
	        upgrade: [],
	        color: 'black'
	    },
	    artillery: {
	        projectile: {
	            damage: 70,
	            travelTime: 0.3, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "siege",
	            effects: {
	                amplify: {
	                    amount: 2,
	                    timer: 3
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 1,
	        range: 600,
	        goldCost: 110,
	        totalCost: 150,
	        upgrade: [],
	        color: 'black'
	    },
	
	    // Fire tower tree here
	    fire: {
	        projectile: {
	            damage: 10,
	            travelTime: 0.3, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "fire",
	            effects: {
	                dot: {
	                    amount: 5, // dps
	                    timer: 2
	                }
	            }
	        },
	        primary: true,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.6,
	        range: 300,
	        goldCost: 30,
	        totalCost: 30,
	        upgrade: [{
	            name: "broiler"
	        }, {
	            name: "flamethrower"
	        }],
	        color: 'red'
	    },
	    broiler: {
	        projectile: {
	            damage: 8,
	            travelTime: 0.01, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "fire",
	            effects: {
	                dot: {
	                    amount: 10, // dps
	                    timer: 3
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 30,
	        attackSpeed: 0.2,
	        range: 300,
	        goldCost: 60,
	        totalCost: 90,
	        upgrade: [{
	            name: "volcano"
	        }, {
	            name: "inferno"
	        }],
	        color: 'red'
	    },
	    volcano: {
	        projectile: {
	            damage: 20,
	            travelTime: 0.01, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "fire",
	            effects: {
	                dot: {
	                    amount: 10, // dps
	                    timer: 3
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 30,
	        attackSpeed: 0.2,
	        range: 300,
	        goldCost: 110,
	        totalCost: 200,
	        upgrade: [],
	        color: 'red'
	    },
	    inferno: {
	        projectile: {
	            damage: 15,
	            travelTime: 0.01, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "fire",
	            effects: {
	                dot: {
	                    amount: 10, // dps
	                    timer: 3
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 30,
	        attackSpeed: 0.2,
	        range: 500,
	        goldCost: 110,
	        totalCost: 200,
	        upgrade: [],
	        color: 'red'
	    },
	    flamethrower: {
	        projectile: {
	            damage: 4,
	            travelTime: 1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "fire",
	            effects: {}
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.1,
	        range: 300,
	        goldCost: 60,
	        totalCost: 90,
	        upgrade: [{
	            name: "napalm"
	        }, {
	            name: "nova"
	        }],
	        color: 'red'
	    },
	    napalm: {
	        projectile: {
	            damage: 10,
	            travelTime: 1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "fire",
	            effects: {}
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.1,
	        range: 400,
	        goldCost: 90,
	        totalCost: 150,
	        upgrade: [],
	        color: 'red'
	    },
	    nova: {
	        projectile: {
	            damage: 10,
	            travelTime: 0.3, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "fire",
	            effects: {
	                dot: {
	                    amount: 40, // dps
	                    timer: 2
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 3,
	        attackSpeed: 1,
	        range: 400,
	        goldCost: 90,
	        totalCost: 150,
	        upgrade: [],
	        color: 'red'
	    },
	
	    // Ice starts here
	    ice: {
	        projectile: {
	            damage: 10,
	            travelTime: 0.8, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "ice",
	            effects: {
	                slow: {
	                    amount: 0.3, // %slow
	                    timer: 2
	                }
	            }
	        },
	        primary: true,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.8,
	        range: 300,
	        goldCost: 30,
	        totalCost: 30,
	        upgrade: [{
	            name: "blizzard"
	        }, {
	            name: "frost"
	        }],
	        color: 'blue'
	    },
	    blizzard: {
	        projectile: {
	            damage: 5,
	            travelTime: 0.2, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "ice",
	            effects: {
	                slow: {
	                    amount: 0.4, // %slow
	                    timer: 3
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 30,
	        attackSpeed: 0.8,
	        range: 300,
	        goldCost: 70,
	        totalCost: 100,
	        upgrade: [{
	            name: "arctic"
	        }],
	        color: 'blue'
	    },
	    arctic: {
	        projectile: {
	            damage: 12,
	            travelTime: 0.2, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "ice",
	            effects: {
	                slow: {
	                    amount: 0.5, // %slow
	                    timer: 3
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 30,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 70,
	        totalCost: 170,
	        upgrade: [],
	        color: 'blue'
	    },
	    frost: {
	        projectile: {
	            damage: 25,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "ice",
	            effects: {
	                slow: {
	                    amount: 0.5, // %slow
	                    timer: 3
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.8,
	        range: 300,
	        goldCost: 60,
	        totalCost: 90,
	        upgrade: [{
	            name: "tundra"
	        }, {
	            name: "permafrost"
	        }],
	        color: 'blue'
	    },
	    tundra: {
	        projectile: {
	            damage: 40,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "ice",
	            effects: {
	                slow: {
	                    amount: 0.65, // %slow
	                    timer: 3
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 90,
	        totalCost: 180,
	        upgrade: [],
	        color: 'blue'
	    },
	    permafrost: {
	        projectile: {
	            damage: 30,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "ice",
	            effects: {
	                freeze: {
	                    chance: 0.2,
	                    timer: 1
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 120,
	        totalCost: 210,
	        upgrade: [],
	        color: 'blue'
	    },
	    // Light tower tree here
	    light: {
	        projectile: {
	            damage: 5,
	            travelTime: 0.1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "light",
	            effects: {}
	        },
	        primary: true,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.4,
	        range: 500,
	        goldCost: 30,
	        totalCost: 30,
	        upgrade: [{
	            name: "laser"
	        }, {
	            name: "electric"
	        }],
	        color: 'yellow'
	    },
	    laser: {
	        projectile: {
	            damage: 15,
	            travelTime: 0.1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "light",
	            effects: {}
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.3,
	        range: 600,
	        goldCost: 60,
	        totalCost: 90,
	        upgrade: [{
	            name: "prism"
	        }],
	        color: 'yellow'
	    },
	    prism: {
	        projectile: {
	            damage: 50,
	            travelTime: 0.1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "light",
	            effects: {}
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.2,
	        range: 600,
	        goldCost: 180,
	        totalCost: 270,
	        upgrade: [{
	            name: "prism"
	        }],
	        color: 'yellow'
	    },
	    electric: {
	        projectile: {
	            damage: 15,
	            travelTime: 0.1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "light",
	            effects: {
	                bounce: {
	                    amount: 2,
	                    range: 300
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.6,
	        range: 400,
	        goldCost: 60,
	        totalCost: 90,
	        upgrade: [{
	            name: "lightning"
	        }, {
	            name: "generator"
	        }],
	        color: 'yellow'
	    },
	    lightning: {
	        projectile: {
	            damage: 35,
	            travelTime: 0.1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "light",
	            effects: {
	                bounce: {
	                    amount: 2,
	                    range: 300
	                }
	            }
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.6,
	        range: 400,
	        goldCost: 90,
	        totalCost: 180,
	        upgrade: [],
	        color: 'yellow'
	    },
	    generator: {
	        projectile: {
	            damage: 35,
	            travelTime: 0.1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "light",
	            effects: {}
	        },
	        primary: false,
	        icon: "./assets/tower.jpg",
	        sprite: "TODO",
	        targets: 3,
	        attackSpeed: 0.6,
	        range: 400,
	        goldCost: 90,
	        totalCost: 180,
	        upgrade: [],
	        color: 'yellow'
	    }
	
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var constants = __webpack_require__(7),
	    towerData = __webpack_require__(5),
	    typeLookup = __webpack_require__(8);
	
	/* ================== Public functions =================*/
	/* =====================================================*/
	function addClass(element, cssClass) {
	    if (element.className === "") {
	        element.className = cssClass;
	    } else {
	        element.className += " " + cssClass;
	    }
	}
	
	/*
	checkIfInSquare checks whether a point is in a square (which is a monster or a tower)
	
	Takes in three arguments
	point - a object with x and y coordinates
	topLeftPoint - an object with x and y coordinates of the top left corner of the square
	sideLength - the length of the square
	
	Returns a boolean - true if the click overlaps with an element and false
	                    if it does not
	*/
	function checkIfInSquare(point, topLeftPoint, sideLength) {
	    return point.x >= topLeftPoint.x && point.x <= topLeftPoint.x + sideLength && point.y >= topLeftPoint.y && point.y <= topLeftPoint.y + sideLength;
	}
	
	/*
	Takes in a distance (int) and pathLines(array of path objects) and converts it to coordinates for a monster
	Returns a coordinate object
	*/
	function convertDistanceToCoordinates(distance, pathLines) {
	    var coordinates,
	        end = false; // Boolean to represent whether the monster is at the end
	
	
	    for (var i = 0; i < pathLines.length; i++) {
	        if (distance - pathLines[i].distance <= 0) {
	            break;
	        } else {
	            distance -= pathLines[i].distance;
	        }
	    }
	
	    if (i === pathLines.length) {
	        i--; // Set the counter value to be the last value in the pathlines array
	        distance = pathLines[i].distance;
	        end = true;
	    }
	
	    // Create a new object to return (instead of modifiying startPoint object)
	    coordinates = Object.create(pathLines[i].startPoint);
	    coordinates.end = end;
	
	    // Case for when monster is at the end of the thingy - there is a better way to write this but not right now
	    if (!end) {
	        switch (pathLines[i].direction) {
	            // 15 is a half of the monster width
	            // values used to offset the positioning based on the monster direciton movement
	            case "up":
	                coordinates.x -= constants.MONSTERLENGTH / 2;
	                coordinates.y -= distance + constants.MONSTERLENGTH / 2;
	                break;
	            case "down":
	                coordinates.x -= constants.MONSTERLENGTH / 2;
	                coordinates.y += distance - constants.MONSTERLENGTH / 2;
	                break;
	            case "left":
	                coordinates.x -= distance + constants.MONSTERLENGTH / 2;
	                coordinates.y -= constants.MONSTERLENGTH / 2;
	                break;
	            case "right":
	                coordinates.x += distance - constants.MONSTERLENGTH / 2;
	                coordinates.y -= constants.MONSTERLENGTH / 2;
	                break;
	            default:
	                throw new Error("Invalid direction provided in pathLines");
	        }
	    } else {
	        switch (pathLines[i].direction) {
	            case "up":
	                coordinates.y -= pathLines[i].distance;
	                break;
	            case "down":
	                coordinates.y += pathLines[i].distance;
	                break;
	            case "left":
	                coordinates.x -= pathLines[i].distance;
	                break;
	            case "right":
	                coordinates.x += pathLines[i].distance;
	                break;
	            default:
	                throw new Error("Invalid direction provided in pathLines");
	        }
	    }
	
	    return coordinates;
	}
	
	// Takes in a position object with coordinates{x, y}
	// returns a block object {x, y} with block numbers
	// Handles edge cases of the block being defined at the edge (36 and 24 which are invalid in the )
	function convertToBlock(position) {
	    var xGridAmount = constants.CANVASWIDTH / constants.GRIDSIZE,
	        yGridAmount = constants.CANVASHEIGHT / constants.GRIDSIZE;
	
	    if (position.x > xGridAmount * (constants.TOWERLENGTH / 2) || position.y > yGridAmount * (constants.TOWERLENGTH / 2)) {
	        console.log(position);
	        throw new Error("Position out of grid range");
	    }
	
	    var block = {
	        x: Math.floor(position.x / (constants.TOWERLENGTH / 2)),
	        y: Math.floor(position.y / (constants.TOWERLENGTH / 2))
	    };
	    // Adjusts if mouse is at end of container
	    // 36 blocks width and 24 blocks height
	    if (block.x >= xGridAmount - 1) {
	        block.x--;
	    }
	
	    if (block.y >= yGridAmount - 1) {
	        block.y--;
	    }
	
	    return block;
	}
	
	/*
	Takes in a position object (x and y coordinates)
	Returns the top left block position and topleft coordinate of the tower
	Grid blocks are in 25x25 block increments
	*/
	function convertPositionToTower(position) {
	    var towerPosition = {
	        grid: {},
	        coordinates: {},
	        side: constants.TOWERLENGTH
	    },
	        xGridAmount = constants.CANVASWIDTH / constants.GRIDSIZE,
	        yGridAmount = constants.CANVASHEIGHT / constants.GRIDSIZE;
	
	    towerPosition.grid = convertToBlock(position);
	
	    // Container width and height 900 and 600 px respectively
	    towerPosition.coordinates.x = towerPosition.grid.x / xGridAmount * constants.CANVASWIDTH;
	    towerPosition.coordinates.y = towerPosition.grid.y / yGridAmount * constants.CANVASHEIGHT;
	    return towerPosition;
	}
	/*
	getPathPosition inputs:
	initialPosition: position object {x, y}
	finalPosition: position object {x, y}
	fractionTravelled: decimal of how far along the path
	
	Output: position object {x, y}
	*/
	function getPathPosition(pos1, pos2, fractionTravelled) {
	    var finalPosition = {},
	        angle = Math.atan2(pos2.y - pos1.y, pos2.x - pos1.x),
	        // the line angle (in radians) from pos1 to pos2 with respect to the origin
	    distanceFromPos1 = getPositionDifference(pos1, pos2) * fractionTravelled;
	
	    finalPosition.x = pos1.x + distanceFromPos1 * Math.cos(angle);
	    finalPosition.y = pos1.y + distanceFromPos1 * Math.sin(angle);
	
	    return finalPosition;
	}
	
	function getPositionDifference(position1, position2) {
	    return Math.sqrt(Math.pow(position1.x - position2.x, 2) + Math.pow(position1.y - position2.y, 2));
	}
	
	function removeClass(element, cssClass) {
	    var arrayOfClasses = element.className.split(" ");
	    for (var i = 0, j = arrayOfClasses.length; i < j; i++) {
	        if (arrayOfClasses[i] === cssClass) {
	            arrayOfClasses.splice(i, 1);
	            i--;j--;
	        }
	    }
	    element.className = arrayOfClasses.join(" ");
	}
	
	function getTowerData(towerType) {
	    return towerData[towerType];
	}
	
	// Inserts variables into a html template -
	function compileTemplate(template, object) {
	    var html = template;
	    for (var key in object) {
	        html = html.replace(new RegExp("{{" + key + "}}", 'g'), object[key]);
	    }
	    // Removes unspecified template strings
	    html = html.replace(/{{.*?}}/g, "");
	    return html;
	}
	
	function getTowerEffects(towerObject) {
	    var effectObject = towerObject.projectile.effects,
	        effects = "";
	
	    for (var key in effectObject) {
	        effects += "<span class='uppercase'>" + key + "</span>";
	
	        switch (key) {
	            case "dot":
	                effects += "\n                <ul>\n                    <li>Damage Per Second: " + effectObject[key].amount + "</li>\n                    <li>Duration: " + effectObject[key].timer + "</li>\n                </ul>";
	                break;
	            case "amplify":
	                effects += "\n                <ul>\n                    <li>Amplify: " + effectObject[key].amount * 100 + "%</li>\n                    <li>Duration: " + effectObject[key].timer + "</li>\n                </ul>\n                ";
	                break;
	            case "splash":
	                effects += "\n                <ul>\n                    <li>Radius: " + effectObject[key].radius + "</li>\n                </ul>\n                ";
	                break;
	            case "slow":
	                effects += "\n                <ul>\n                    <li>Slow: " + effectObject[key].amount * 100 + "%</li>\n                    <li>Duration: " + effectObject[key].timer + "</li>\n                </ul>\n                ";
	                break;
	            case "freeze":
	                effects += "\n                <ul>\n                    <li>Freeze Chance: " + effectObject[key].chance * 100 + "%</li>\n                    <li>Duration: " + effectObject[key].timer + "</li>\n                </ul>\n                ";
	                break;
	            case "bounce":
	                effects += "\n                <ul>\n                    <li>Bounces: " + effectObject[key].amount + "</li>\n                    <li>Range: " + effectObject[key].range + "</li>\n                </ul>\n                ";
	                break;
	            default:
	                console.log("Uncaught effect in getTowerEffects", key);
	        }
	    }
	
	    return effects || "None";
	}
	
	function getDamageModifier(towerType, monsterType) {
	    try {
	        return typeLookup[towerType][monsterType];
	    } catch (e) {
	        console.log(e, "Error in looking up types, check tower data and monster data");
	        return 1;
	    }
	}
	
	function getMonsterTypeInfo(monsterType) {
	    var strengths = [],
	        weaknesses = [],
	        strengthHtml = "None",
	        weaknessHtml = "None";
	
	    for (var key in typeLookup) {
	        if (typeLookup[key][monsterType] < 1) {
	            strengths.push(key);
	        } else if (typeLookup[key][monsterType] > 1) {
	            weaknesses.push(key);
	        }
	    }
	
	    if (strengths.length !== 0) {
	        strengthHtml = strengths.reduce(function (prev, strength) {
	            return prev + "<li>" + strength + "</li>";
	        }, "<ul>") + "</ul>";
	    }
	    if (weaknesses.length !== 0) {
	        weaknessHtml = weaknesses.reduce(function (prev, weakness) {
	            return prev + "<li>" + weakness + "</li>";
	        }, "<ul>") + "</ul>";
	    }
	
	    return {
	        strengths: strengthHtml,
	        weaknesses: weaknessHtml
	    };
	}
	
	module.exports = {
	    addClass: addClass,
	    checkIfInSquare: checkIfInSquare,
	    convertToBlock: convertToBlock,
	    convertDistanceToCoordinates: convertDistanceToCoordinates,
	    convertPositionToTower: convertPositionToTower,
	    getPathPosition: getPathPosition,
	    getPositionDifference: getPositionDifference,
	    removeClass: removeClass,
	    compileTemplate: compileTemplate,
	    getTowerData: getTowerData,
	    getTowerEffects: getTowerEffects,
	    getDamageModifier: getDamageModifier,
	    getMonsterTypeInfo: getMonsterTypeInfo
	};

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	    CANVASWIDTH: 900, // probably need a way to set the html canvas size from here
	    CANVASHEIGHT: 600, // probably need a way to set the html canvas size from here
	    GRIDSIZE: 25,
	    TOWERLENGTH: 50,
	    MONSTERLENGTH: 30,
	    PROJECTILELENGTH: 10,
	    TIMEBETWEENMONSTERCREATE: 1, // second
	    TIMEBETWEENLEVELS: 2, // seconds
	    FINALLEVEL: 50,
	    STARTINGGOLD: 10,
	    STARTINGLIVES: 30,
	    MESSAGEFONT: '40pt Droid Sans',
	    MESSAGECOLOR: 'red',
	    MESSAGEDURATION: 0.8,
	    MESSAGEINVALIDPLACEMENT: "Invalid Tower Placement",
	    MESSAGENOTENOUGHGOLD: "Not Enough Gold",
	    MESSAGETOWERSOLD: "Tower Sold For "
	};

/***/ },
/* 8 */
/***/ function(module, exports) {

	"use strict";
	
	/*
	Note this only affects projectiles, does not affect DOT damage
	First key represents the tower type/projectile type
	second key represents the monster type
	I.E.
	{
	    towerType: {
	        monsterType: damageModifier
	    }
	}
	*/
	module.exports = {
	    normal: {
	        normal: 1,
	        heavy: 0.6,
	        fire: 1,
	        ice: 1,
	        light: 1,
	        dark: 1,
	        water: 1
	    },
	    siege: {
	        normal: 0.8,
	        heavy: 1.5,
	        fire: 1,
	        ice: 1,
	        light: 1,
	        dark: 1,
	        water: 1
	    },
	    fire: {
	        normal: 1,
	        heavy: 0.8,
	        fire: 0.65,
	        ice: 2,
	        light: 1.2,
	        dark: 0.9,
	        water: 0.5
	    },
	    ice: {
	        normal: 1,
	        heavy: 0.8,
	        fire: 0.5,
	        ice: 0.9,
	        light: 1.2,
	        dark: 1.2,
	        water: 1.5
	    },
	    light: {
	        normal: 1,
	        heavy: 0.8,
	        fire: 0.8,
	        ice: 0.8,
	        light: 1,
	        dark: 2,
	        water: 0.8
	    }
	};

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var towerData = __webpack_require__(5),
	    _require = __webpack_require__(6),
	    getPathPosition = _require.getPathPosition,
	    constants = __webpack_require__(7);
	
	// Projectiles are attached to monsters
	var Projectile = function Projectile(id, towerPosition) {
	    this.id = id;
	    this.damage = towerData[id].projectile.damage;
	    this.totalTravelTime = towerData[id].projectile.travelTime;
	    this.sprite = towerData[id].projectile.sprite;
	    this.type = towerData[id].projectile.type;
	    this.effects = {};
	
	    for (var key in towerData[id].projectile.effects) {
	        this.effects[key] = Object.assign({}, towerData[id].projectile.effects[key]);
	    }
	
	    this.currentTravelTime = 0;
	    this.end = false;
	    this.initialPosition = {
	        x: towerPosition.x + constants.TOWERLENGTH / 2 - constants.PROJECTILELENGTH / 2,
	        y: towerPosition.y + constants.TOWERLENGTH / 2 - constants.PROJECTILELENGTH / 2
	    };
	    this.projectilePosition = this.initialPosition;
	};
	
	Projectile.prototype.draw = function () {
	    // Calculate a fraction based on currentTravelTime / travelTime to get the position
	    dynamicContext.beginPath();
	    dynamicContext.fillStyle = "orange";
	    dynamicContext.rect(this.projectilePosition.x, this.projectilePosition.y, constants.PROJECTILELENGTH, constants.PROJECTILELENGTH);
	    dynamicContext.fill();
	    // Change this to use a sprite
	    // draw based on position here
	
	    dynamicContext.closePath();
	};
	
	Projectile.prototype.move = function (dt, targetPosition) {
	    this.currentTravelTime += dt;
	    if (this.currentTravelTime >= this.totalTravelTime) {
	        this.end = true;
	    }
	
	    var fractionTravelled = this.currentTravelTime / this.totalTravelTime,
	        adjustedMonsterPosition = {
	        x: targetPosition.x + constants.MONSTERLENGTH / 2 - constants.PROJECTILELENGTH / 2,
	        y: targetPosition.y + constants.MONSTERLENGTH / 2 - constants.PROJECTILELENGTH / 2
	    };
	    this.projectilePosition = getPathPosition(this.initialPosition, adjustedMonsterPosition, fractionTravelled);
	};
	
	module.exports = Projectile;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//  require Monster to gain access
	var Monster = __webpack_require__(11),
	    Tower = __webpack_require__(4),
	    Projectile = __webpack_require__(9),
	    towerData = __webpack_require__(5),
	    levelData = __webpack_require__(13),
	    _require = __webpack_require__(6),
	    checkIfInSquare = _require.checkIfInSquare,
	    getPositionDifference = _require.getPositionDifference,
	    convertToBlock = _require.convertToBlock,
	    pathCoordinates = __webpack_require__(14),
	    constants = __webpack_require__(7);
	
	
	var GameEngine = function GameEngine() {
	    this.setDefaults();
	};
	
	GameEngine.prototype.setDefaults = function () {
	    this.userGold = constants.STARTINGGOLD;
	    this.level = 0;
	    this.userLives = constants.STARTINGLIVES;
	    this.activeMonsters = []; // List of active monsters in the game
	    this.towers = []; // object of tower objects
	    this.timer = constants.TIMEBETWEENMONSTERCREATE;
	    this.nextLevelCalled = false;
	    this.monstersToCreate = 0;
	    this.unfinishedProjectiles = [];
	    this.state = "start"; // Possible values are start, playing, won, lost
	    this.gamePath = _convertPathToLines(pathCoordinates.path);
	    this.gameGrid = _initiateGrid(this.gamePath);
	};
	
	GameEngine.prototype.addMonster = function (level) {
	    // Level lookup needs to be modified to access correct levelData array index
	    var monster = new Monster(levelData[level - 1].type, level);
	    this.activeMonsters.push(monster);
	};
	
	GameEngine.prototype.addTower = function (id, position, gridPosition, goldCost) {
	    this.userGold -= goldCost;
	    var tower = new Tower(position, id);
	    this.towers.push(tower);
	    // Set gameGrid positioning
	    this.gameGrid[gridPosition.x][gridPosition.y] = { empty: false };
	    this.gameGrid[gridPosition.x + 1][gridPosition.y] = { empty: false };
	    this.gameGrid[gridPosition.x][gridPosition.y + 1] = { empty: false };
	    this.gameGrid[gridPosition.x + 1][gridPosition.y + 1] = { empty: false };
	};
	
	/*
	Takes in a position object (location of the click)
	Returns an object with information about what is at that position
	{type: null} if nothing found
	*/
	GameEngine.prototype.checkClickLocation = function (position) {
	    var element = {};
	    // Loops through activeMonsters
	    this.activeMonsters.some(function (activeMonster, i) {
	        if (checkIfInSquare(position, activeMonster.position, activeMonster.sideLength)) {
	            element.type = "monster";
	            element.index = i;
	            return true;
	        } else {
	            return false;
	        }
	    });
	
	    // If nothing was found, loop through towers
	    if (element.type === undefined) {
	        this.towers.some(function (tower, i) {
	            if (checkIfInSquare(position, tower.position, tower.position.sideLength)) {
	                element.type = "tower";
	                element.index = i;
	                return true;
	            } else {
	                return false;
	            }
	        });
	    }
	
	    // If no towers or monsters found return a type of null
	    if (element.type === undefined) {
	        element.type = null;
	    }
	
	    return element;
	};
	
	GameEngine.prototype.checkGameState = function () {
	    if (this.level === constants.FINALLEVEL + 1) {
	        // MAX level
	        this.state = "won";
	    } else if (this.userLives <= 0) {
	        this.state = "lost";
	    }
	};
	
	// method to check gold before place tower or upgrade
	GameEngine.prototype.checkGold = function (goldCost) {
	    return goldCost <= this.userGold;
	};
	
	GameEngine.prototype.gameStart = function () {
	    this.state = "playing";
	    this.level = 0;
	    this.nextLevel();
	};
	
	GameEngine.prototype.handleEffects = function (activeMonster, i) {
	    // TODO pull this out into an external function
	    // Handle splash,bounce here
	    if (activeMonster.effects.hasOwnProperty("splash")) {
	        // Search all monsters in range of this
	        var splashRange = activeMonster.effects.splash.radius;
	
	        this.activeMonsters.forEach(function (searchMonster, j) {
	            if (i !== j) {
	                var distance = getPositionDifference(searchMonster.position, activeMonster.position);
	                if (distance < splashRange) {
	                    searchMonster.updateHp(-activeMonster.effects.splash.damage);
	                }
	            }
	        });
	        delete activeMonster.effects.splash;
	    } else if (activeMonster.effects.hasOwnProperty("bounce")) {
	        var bounceRange = activeMonster.effects.bounce.range;
	        if (activeMonster.effects.bounce.amount > 0) {
	            // search all monsters in range of bounce
	            this.activeMonsters.some(function (searchMonster, j) {
	                if (i !== j) {
	                    var distance = getPositionDifference(searchMonster.position, activeMonster.position);
	                    if (distance < bounceRange) {
	                        var id = activeMonster.effects.bounce.id,
	                            position = Object.assign({}, activeMonster.position); // Shallow copy
	
	                        position.x += constants.MONSTERLENGTH / 2 - constants.TOWERLENGTH / 2;
	                        position.y += constants.MONSTERLENGTH / 2 - constants.TOWERLENGTH / 2;
	
	                        var addedProjectile = new Projectile(id, position);
	
	                        // Reduce the number of bounces based on previous projectile
	                        // TODO figure out a way to prevent bouncing to same monster - if it matters?
	                        addedProjectile.effects.bounce.amount = activeMonster.effects.bounce.amount - 1;
	
	                        searchMonster.projectiles.push(addedProjectile);
	                        return true;
	                    } else {
	                        // Keep searching
	                        return false;
	                    }
	                }
	            });
	        }
	
	        delete activeMonster.effects.bounce;
	    }
	};
	
	GameEngine.prototype.nextLevel = function () {
	    // Only calls the next level once - nextLevelCalled is reset on a new monster creation
	    this.monstersToCreate = levelData[this.level].amount; // this.level refers to the next level
	    this.level++;
	    this.nextLevelCalled = false;
	};
	
	/*
	placeTower handles the validation of the tower placement (position and sufficient gold)
	Takes in 3 arguments:
	towerName - string specifying what tower is being placed
	gridPosition - top left grid block of where the tower would be placed
	towerCoordinates - top left coordinate of a tower
	Returns an object with a boolean to represent whether the tower is placed and an error message if the tower was not placed
	*/
	GameEngine.prototype.placeTower = function (towerName, gridPosition, towerCoordinates) {
	    var goldCost = towerData[towerName].goldCost;
	    // Validate tower placement
	    if (this.validateTowerPlacement(gridPosition) && this.checkGold(goldCost)) {
	        this.addTower(towerName, towerCoordinates, gridPosition, goldCost);
	        return { placed: true };
	    } else {
	        return {
	            placed: false,
	            message: this.validateTowerPlacement(gridPosition) ? constants.MESSAGENOTENOUGHGOLD : constants.MESSAGEINVALIDPLACEMENT
	        };
	    }
	};
	
	GameEngine.prototype.render = function (activeCanvasElement) {
	    // send state to the display object to render
	    dynamicContext.beginPath();
	    dynamicContext.clearRect(0, 0, dynamicCanvas.width, dynamicCanvas.height);
	
	    // Render towers first so that if monsters are larger they show above towers
	    this.towers.forEach(function (tower, i) {
	        var active = activeCanvasElement.type === "tower" && activeCanvasElement.index === i;
	        tower.draw(active);
	    });
	
	    //  loop through list of active monsters and render them
	    this.activeMonsters.forEach(function (activeMonster) {
	        activeMonster.draw();
	
	        // Renders projectile animations that are active for each monster
	        activeMonster.projectiles.forEach(function (projectile) {
	            projectile.draw();
	        });
	    });
	
	    this.unfinishedProjectiles.forEach(function (projectile) {
	        projectile.draw();
	    });
	
	    dynamicContext.closePath();
	};
	
	// Changed values to be based off dt (change in time since last render)
	GameEngine.prototype.runCycle = function (dt) {
	    var _this = this;
	
	    this.checkGameState();
	    // loop through active monsters and towers and run the cycle
	    // Each runCycle method returns information for the gameEngine to
	    // process (e.g. the monster died, tower changed)
	
	    // Adds monsters if there are monsters to create - creates 10 per level
	    if (this.monstersToCreate > 0) {
	        //  timer to add monsters
	        this.timer -= dt;
	        if (this.timer <= 0) {
	            this.addMonster(this.level); // send through the level number
	            this.timer = constants.TIMEBETWEENMONSTERCREATE; // Every 1 second create a new monster
	            this.monstersToCreate--;
	            this.nextLevelCalled = false;
	        }
	    }
	
	    // Checks whether there are any monsters left and whether all the monsters have been created
	    if (this.activeMonsters.length === 0 && this.monstersToCreate === 0 && !this.nextLevelCalled) {
	        setTimeout(function () {
	            return _this.nextLevel();
	        }, constants.TIMEBETWEENLEVELS * 1000);
	
	        this.nextLevelCalled = true;
	    }
	
	    this.activeMonsters.forEach(function (activeMonster, i, monsterArray) {
	        // moves the monsters and checks whether they get to the end of the cycle
	        // also factor to have a projectiles array - which means that each cycle for monsters they will take damage
	        activeMonster.runCycle(_this.gamePath, dt);
	
	        // Handles external effects to the monsters (splash and bounce effects)
	        _this.handleEffects(activeMonster, i);
	
	        var monsterStatus = activeMonster.checkDeath();
	
	        if (!monsterStatus.alive) {
	            if (monsterStatus.giveGold) {
	                _this.userGold += activeMonster.bounty;
	            } else {
	                _this.userLives--;
	            }
	            var monsterDeath = new CustomEvent("unitRemoved", { "detail": { index: i, element: "monster" } });
	            document.dispatchEvent(monsterDeath);
	            // Copy over projectiles before monster is removed- need to do direct reference copy because it's an object with prototype properties
	            _this.unfinishedProjectiles = activeMonster.projectiles;
	            _this.unfinishedProjectiles.forEach(function (projectile) {
	                projectile.target = activeMonster.position;
	            });
	            monsterArray.splice(i, 1);
	        }
	    });
	
	    // Run tower cycles here - pass in active monsters - towers only create projectiles
	    this.towers.forEach(function (tower) {
	        tower.runCycle(_this.activeMonsters, dt); // Pass in active monsters and attach projectiles to them
	    });
	
	    this.unfinishedProjectiles.forEach(function (projectile, i, projectileArray) {
	        projectile.move(dt, projectile.target);
	        if (projectile.end) {
	            projectileArray.splice(i, 1);
	        }
	    });
	};
	
	GameEngine.prototype.sellTower = function (towerIndex) {
	    var gridPosition = convertToBlock(this.towers[towerIndex].position),
	        towerDeath = new CustomEvent("unitRemoved", { "detail": { index: towerIndex, element: "tower" } }),
	        sellPrice = Math.floor(this.towers[towerIndex].totalCost * 0.75);
	    // Dispatch the tower death event for the ui to update
	    document.dispatchEvent(towerDeath);
	
	    this.userGold += sellPrice;
	    this.towers.splice(towerIndex, 1);
	
	    // Remove tower from the game grid
	    this.gameGrid[gridPosition.x][gridPosition.y].empty = true;
	    this.gameGrid[gridPosition.x + 1][gridPosition.y].empty = true;
	    this.gameGrid[gridPosition.x][gridPosition.y + 1].empty = true;
	    this.gameGrid[gridPosition.x + 1][gridPosition.y + 1].empty = true;
	    return sellPrice;
	};
	
	GameEngine.prototype.upgradeTower = function (towerIndex, upgradeName) {
	    // Check for sufficient gold
	    if (towerData[upgradeName].goldCost > this.userGold) {
	        return false;
	    } else {
	        // Create a the upgraded tower at the same position and replace that in the towers array
	        var upgradedTower = new Tower(this.towers[towerIndex].position, upgradeName);
	        this.userGold -= towerData[upgradeName].goldCost;
	        this.towers.splice(towerIndex, 1, upgradedTower);
	        return true;
	    }
	};
	
	/*
	Takes in a gridPosition object (points to the top left corner of the tower)
	Towers take up a 2x2 grid - this function checks all positions
	Returns true if the position is a valid placement for a tower
	Returns false if the position is invalid
	*/
	GameEngine.prototype.validateTowerPlacement = function (gridPosition) {
	    // Checks all 4 positions
	    var positionValid = this.gameGrid[gridPosition.x][gridPosition.y].empty && this.gameGrid[gridPosition.x + 1][gridPosition.y].empty && this.gameGrid[gridPosition.x][gridPosition.y + 1].empty && this.gameGrid[gridPosition.x + 1][gridPosition.y + 1].empty;
	    return positionValid;
	};
	
	/*
	Input: Path - an array of objects containing coordinates where the path will run to
	Output: pathLines - an array of objects containing the startPoint (coordinates),
	        distance of the line and direction (left, right, up, down)
	*/
	function _convertPathToLines(path) {
	    var pathLines = [];
	    for (var i = 0; i < path.length - 1; i++) {
	        var line = {};
	
	        // Assume that the direction is only 4 ways
	        if (path[i + 1].x - path[i].x === 0) {
	
	            if (path[i + 1].y - path[i].y > 0) {
	                line.direction = "down";
	            } else {
	                line.direction = "up";
	            }
	        } else {
	            if (path[i + 1].x - path[i].x === 0 > 0) {
	                line.direction = "left";
	            } else {
	                line.direction = "right";
	            }
	        }
	        line.startPoint = path[i];
	        line.distance = getPositionDifference(path[i], path[i + 1]);
	        pathLines.push(line);
	    }
	
	    return pathLines;
	}
	
	/*
	Converts a pathLines array (an array of objects with a startPoint,
	direction and a distance) into an array of grid blocks ()
	Note that there will be some overlap with blocks, however,
	as they are only used to set grid positions to not empty, overlap is not an issue
	*/
	function _createPathBlocks(pathLines) {
	    var blocks = [];
	    // Loops through all the pathLines and creates blocks based on that
	    for (var i = 0; i < pathLines.length; i++) {
	        // blockAmount refers to the amount of blocks that follow the path
	        var blockAmount = Math.floor(pathLines[i].distance / constants.GRIDSIZE) + 1,
	            pathDirection = void 0;
	        /* Set direction
	        x: 1 = right
	        x: -1 = left
	        y: 1 = down
	        y: -1 = up
	        Offset values help center the grid blocks (i.e. inline with the direction)
	        Side values are used to define which side the blocks are on relative to
	        the path direction (i.e. horizontally or vertically)
	        */
	        switch (pathLines[i].direction) {
	            case "up":
	                pathDirection = {
	                    x: 0,
	                    y: -1,
	                    xSide: constants.GRIDSIZE / 2,
	                    ySide: 0
	                };
	                break;
	            case "down":
	                pathDirection = {
	                    x: 0,
	                    y: 1,
	                    xSide: constants.GRIDSIZE / 2,
	                    ySide: 0
	                };
	                break;
	            case "left":
	                pathDirection = {
	                    x: -1,
	                    y: 0,
	                    xSide: 0,
	                    ySide: constants.GRIDSIZE / 2
	                };
	                break;
	            case "right":
	                pathDirection = {
	                    x: 1,
	                    y: 0,
	                    xSide: 0,
	                    ySide: constants.GRIDSIZE / 2
	                };
	                break;
	            default:
	                throw new Error("Invalid direction provided in pathLines");
	        }
	
	        /*
	        Creates block equal to double the amount of the blockAmount (the equivalent amount of blocks to the path distance)
	        blockBefore refers to blocks either to the left or top of the path
	        blockAfter refers to blocks either to the right or below of the path
	        Creates block locations and gives them offsets to their center positions (for clarity in converting to blocks)
	        */
	        for (var j = 0; j < blockAmount; j++) {
	
	            var blockBefore = {
	
	                x: pathLines[i].startPoint.x - pathDirection.xSide + pathDirection.x * constants.GRIDSIZE * j + pathDirection.x * constants.GRIDSIZE / 2, // Adds a slight offset
	
	                y: pathLines[i].startPoint.y - pathDirection.ySide + pathDirection.y * constants.GRIDSIZE * j + pathDirection.y * constants.GRIDSIZE / 2 // Adds a slight offset
	
	            },
	                blockAfter = {
	                x: pathLines[i].startPoint.x + pathDirection.xSide + pathDirection.x * constants.GRIDSIZE * j + pathDirection.x * constants.GRIDSIZE / 2, // Adds a slight offset
	
	                y: pathLines[i].startPoint.y + pathDirection.ySide + pathDirection.y * constants.GRIDSIZE * j + pathDirection.y * constants.GRIDSIZE / 2 // Adds a slight offset
	            };
	            // Edge case for when the path exits the screen (there is definitely a better way to handle this)
	            // This is such a bad solution lol.
	            if (blockBefore.x < constants.CANVASWIDTH && blockBefore.y < constants.CANVASHEIGHT) {
	                blocks.push(convertToBlock(blockBefore));
	            }
	            if (blockAfter.x < constants.CANVASWIDTH && blockAfter.y < constants.CANVASHEIGHT) {
	                blocks.push(convertToBlock(blockAfter));
	            }
	        }
	    }
	
	    return blocks;
	}
	
	// Grid is 36 by 24
	// can be initiated by [x][y] - each block has a boolean to represent whether something is there
	function _initiateGrid(pathLines) {
	    var grid = [],
	        blocks = _createPathBlocks(pathLines),
	        xGridAmount = constants.CANVASWIDTH / constants.GRIDSIZE,
	        yGridAmount = constants.CANVASHEIGHT / constants.GRIDSIZE;
	
	    // Create the grid
	    for (var x = 0; x < xGridAmount; x++) {
	        grid[x] = [];
	        for (var y = 0; y < yGridAmount; y++) {
	            grid[x][y] = {
	                empty: true
	            };
	        }
	    }
	    // Loop through the blocks and specify the path location
	    blocks.forEach(function (block) {
	        grid[block.x][block.y] = {
	            empty: false
	        };
	    });
	
	    return grid;
	};
	
	module.exports = GameEngine;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var monsterData = __webpack_require__(12),
	    _require = __webpack_require__(6),
	    getDamageModifier = _require.getDamageModifier,
	    convertDistanceToCoordinates = _require.convertDistanceToCoordinates,
	    constants = __webpack_require__(7);
	
	
	var Monster = function Monster(id, level) {
	    this.id = id;
	    this.maxHp = Math.floor(Math.pow(level, 1.2) * monsterData[id].maxHp * (level * 0.6 + 1));
	    this.currentHp = this.maxHp;
	    this.baseMs = monsterData[id].baseMs; // Movement speed - "units" per second
	    this.type = monsterData[id].type;
	    this.bounty = Math.floor(monsterData[id].bounty * (level * 0.2 + 1));
	    this.projectiles = [];
	    this.distanceTravelled = 0;
	    this.position = {}; // Initial position is defined by the path
	    this.sideLength = constants.MONSTERLENGTH;
	    this.effects = {};
	};
	// Method the game object uses to move monsters
	Monster.prototype.runCycle = function (gamePath, dt) {
	    var _this = this;
	
	    this.move(gamePath, dt);
	
	    this.projectiles.forEach(function (projectile, i, projectileArray) {
	        projectile.move(dt, _this.position);
	        if (projectile.end) {
	            // Object.assign doesn't do deep merge - only need to go one level down to prevent reference copying
	            for (var key in projectile.effects) {
	                // TODO figure out how to prioritize multiple effects with different values, e.g. two slows with 0.5 and 0.2 (prioritize the higher one)
	
	                _this.effects[key] = Object.assign({}, projectile.effects[key]);
	
	                // Copy over ID so game can create antoher projectile for bounce
	                if (key === "bounce") {
	                    _this.effects.bounce.id = projectile.id;
	                } else if (key === "splash") {
	                    _this.effects.splash.damage = projectile.damage;
	                }
	            }
	
	            _this.updateHp(-projectile.damage * getDamageModifier(projectile.type, _this.type));
	            projectileArray.splice(i, 1);
	        }
	    });
	
	    // Handle effects here and timers
	    this.handleEffects(dt);
	};
	
	Monster.prototype.draw = function () {
	    dynamicContext.beginPath();
	    dynamicContext.rect(this.position.x, this.position.y, constants.MONSTERLENGTH, constants.MONSTERLENGTH);
	    dynamicContext.stroke();
	    dynamicContext.fillStyle = "red";
	    dynamicContext.fillRect(this.position.x, this.position.y + constants.MONSTERLENGTH / 3, Math.max(constants.MONSTERLENGTH * this.currentHp / this.maxHp, 0), // Minimum value is 0 - can be caused by splash
	    constants.MONSTERLENGTH / 3);
	    dynamicContext.closePath();
	};
	
	Monster.prototype.checkDeath = function () {
	    var status = {};
	
	    if (this.currentHp <= 0 || this.position.end) {
	        status.alive = false;
	        status.giveGold = !this.position.end; // Does not give gold if the monster reached the end
	    } else {
	        status.alive = true;
	    }
	    return status;
	};
	
	Monster.prototype.handleEffects = function (dt) {
	    // Loop through all the effects on the monster
	    // Effects to handle: splash, slow, freeze, dot, amplify, bounce
	    for (var key in this.effects) {
	        switch (key) {
	            case "freeze":
	                if (Math.random() < this.effects.freeze.chance) {
	                    this.effects.frozen = {
	                        timer: this.effects.freeze.timer
	                    };
	                }
	                delete this.effects[key];
	                break;
	            case "splash":
	            case "bounce":
	                // These are handled in the game.runCycle method
	                break;
	            case "dot":
	                this.updateHp(this.effects[key].amount * dt * -1);
	            case "slow":
	            case "amplify":
	            case "frozen":
	                // Reduce timer
	                this.effects[key].timer -= dt;
	                if (this.effects[key].timer < 0) {
	                    delete this.effects[key];
	                }
	                break;
	            default:
	                console.log(key, "unexpected key in effects object");
	        }
	    }
	};
	
	Monster.prototype.move = function (pathLines, dt) {
	    var modifier = 1;
	
	    // Freeze is priority over slow (should be highest to lowest)
	    if (this.effects.hasOwnProperty("frozen")) {
	        modifier = 0;
	    } else if (this.effects.hasOwnProperty("slow")) {
	        modifier = 1 - this.effects.slow.amount;
	    }
	
	    this.distanceTravelled += this.baseMs * dt * modifier;
	    this.position = convertDistanceToCoordinates(this.distanceTravelled, pathLines);
	};
	
	// Can take in a positive or negative number
	Monster.prototype.updateHp = function (hpChange) {
	    var modifier = 1;
	
	    // Only amplifies damage if the monster is taking damage
	    if (hpChange < 0 && this.effects.hasOwnProperty("amplify")) {
	        modifier = this.effects.amplify.amount;
	    }
	
	    this.currentHp += hpChange * modifier;
	
	    if (this.currentHp > this.maxHp) {
	        this.currentHp = this.maxHp;
	    }
	};
	
	module.exports = Monster;

/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = {
	    basic: {
	        maxHp: 30,
	        baseMs: 50, // pixels per second
	        type: "normal", // Change this type later
	        bounty: 4
	    },
	    fast: {
	        maxHp: 30,
	        baseMs: 130, // pixels per second
	        type: "normal", // Change this type later
	        bounty: 4
	    },
	    tank: {
	        maxHp: 60,
	        baseMs: 30,
	        type: "heavy",
	        bounty: 4
	    },
	    fire: {
	        maxHp: 30,
	        baseMs: 70,
	        type: "fire",
	        bounty: 4
	    },
	    ice: {
	        maxHp: 45,
	        baseMs: 60,
	        type: "ice",
	        bounty: 4
	    },
	    light: {
	        maxHp: 30,
	        baseMs: 80,
	        type: "light",
	        bounty: 4
	    },
	    dark: {
	        maxHp: 40,
	        baseMs: 60,
	        type: "dark",
	        bounty: 4
	    },
	    water: {
	        maxHp: 40,
	        baseMs: 60,
	        type: "water",
	        bounty: 4
	    },
	    boss1: {
	        maxHp: 500,
	        baseMs: 80,
	        type: "normal",
	        bounty: 20
	    },
	    boss2: {
	        maxHp: 1500,
	        baseMs: 80,
	        type: "fire",
	        bounty: 40
	    },
	    boss3: {
	        maxHp: 2500,
	        baseMs: 100,
	        type: "heavy",
	        bounty: 100
	    },
	    boss4: {
	        maxHp: 4500,
	        baseMs: 85,
	        type: "water",
	        bounty: 40
	    },
	    boss5: {
	        maxHp: 6000,
	        baseMs: 95,
	        type: "dark",
	        bounty: 40
	    }
	};

/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	
	var exportData = [],
	    currentLevel = void 0;
	
	var monsterLookup = [{
	    type: "basic",
	    amount: 10
	}, {
	    type: "fire",
	    amount: 10
	}, {
	    type: "ice",
	    amount: 8
	}, {
	    type: "light",
	    amount: 10
	}, {
	    type: "tank",
	    amount: 12
	}, {
	    type: "fast",
	    amount: 15
	}, {
	    type: "dark",
	    amount: 10
	}, {
	    type: "water",
	    amount: 10
	}];
	
	for (var i = 0; i < 50; i++) {
	    switch (i) {
	        case 9:
	            currentLevel = {
	                type: "boss1",
	                amount: 4
	            };
	            break;
	        case 19:
	            currentLevel = {
	                type: "boss2",
	                amount: 2
	            };
	            break;
	        case 29:
	            currentLevel = {
	                type: "boss3",
	                amount: 2
	            };
	            break;
	        case 39:
	            currentLevel = {
	                type: "boss4",
	                amount: 3
	            };
	            break;
	        case 49:
	            currentLevel = {
	                type: "boss5",
	                amount: 3
	            };
	            break;
	        default:
	            currentLevel = monsterLookup[i % 6];
	    }
	    exportData.push(currentLevel);
	}
	module.exports = exportData;

/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = {
	    path: [{ x: 0, y: 500 }, { x: 75, y: 500 }, { x: 75, y: 100 }, { x: 225, y: 100 }, { x: 225, y: 500 }, { x: 375, y: 500 }, { x: 375, y: 100 }, { x: 525, y: 100 }, { x: 525, y: 500 }, { x: 675, y: 500 }, { x: 675, y: 100 }, { x: 825, y: 100 }, { x: 825, y: 500 }, { x: 900, y: 500 }]
	};

/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";
	
	var baseModal = "\n<h3 id=\"mainModalTitle\" class=\"modal-title\">{{title}}</h3>\n\n<div id=\"mainModalContent\" class=\"modal-information\">\n    <div class='row'>\n        {{content}}\n    </div>\n    <div class=\"modal-actions\">\n        {{actions}}\n    </div>\n</div>\n<div id=\"mainModalFooter\" class=\"modal-footer\">\n    {{footerActions}}\n</div>\n";
	module.exports = baseModal;

/***/ },
/* 16 */
/***/ function(module, exports) {

	"use strict";
	
	var action = "\n<a data-action=\"{{action}}\" {{extraData}} class=\"waves-effect waves-light btn-large red\">{{name}}</a>\n";
	module.exports = action;

/***/ },
/* 17 */
/***/ function(module, exports) {

	"use strict";
	
	var informationPanel = "\n<h2>Information</h2>\n<div class=\"row\">\n    <h5 id=\"info-name\" class=\"capitalize\">{{title}}</h5>\n</div>\n<div class=\"row\">\n    <img id=\"info-icon\" src=\"{{imagePath}}\" alt=\"\">\n</div>\n{{content}}\n";
	
	module.exports = informationPanel;

/***/ },
/* 18 */
/***/ function(module, exports) {

	"use strict";
	
	var upgradePanel = "\n<div class=\"upgrade-card col {{spacing}}\">\n    <div class=\"card\">\n        <div class=\"card-content\">\n            <h5 class=\"card-title capitalize\">{{title}}</h5>\n            <img src=\"{{imageSrc}}\" class=\"thumbnail-image\">\n            {{content}}\n        </div>\n        <div class=\"card-action\">\n            {{actions}}\n        </div>\n    </div>\n</div>\n\n";
	
	module.exports = upgradePanel;

/***/ },
/* 19 */
/***/ function(module, exports) {

	"use strict";
	
	var towerInfo = "\n<h2 class=\"capitalize\">{{title}}</h2>\n<div class=\"row\">\n    <div class=\"col s6 info-box\">\n    \t<div class=\"capitalize\"><strong>Tower Damage:</strong><br> {{towerDmg}}</div>\n    \t<div class=\"capitalize\"><strong>Tower Travel Time:</strong><br> {{towerTravel}}</div>\n    \t<div class=\"capitalize\"><strong>Tower Cost:</strong><br> {{towerCost}}</div>\n        <div class=\"capitalize\"><strong>Tower Effect:</strong><br> {{towerEffect}}</div>\n    </div>\n    <div class=\"col s6 info-box\">\n    \t<div class=\"capitalize\"><strong>Tower Attack Speed:</strong><br> {{towerSpeed}}</div>\n    \t<div class=\"capitalize\"><strong>Tower Range:</strong><br> {{towerRange}}</div>\n    \t<div class=\"capitalize\"><strong>Tower Targets:</strong><br> {{towerTargets}}</div>\n        <div class=\"capitalize\"><strong>Tower Type:</strong><br> {{towerType}}</div>\n    </div>\n</div>\n";
	module.exports = towerInfo;

/***/ },
/* 20 */
/***/ function(module, exports) {

	"use strict";
	
	var towerCard = "\n<div class=\"col s6\">\n    <div class=\"tower-card card hoverable\" data-tower=\"{{name}}\">\n        <h4 class=\"capitalize\">{{name}}</h4>\n        <img src=\"{{imageSource}}\" class=\".thumbnail-image\">\n    </div>\n</div>\n";
	
	module.exports = towerCard;

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,