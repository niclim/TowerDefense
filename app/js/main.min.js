/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/src/js/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	// Canvas
	__webpack_require__(2);
	
	// User interaction elements
	__webpack_require__(3);

/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	
	// background contains the static canvas elements
	var background = document.getElementById("static");
	var backgroundContext = background.getContext("2d");
	
	// Settings for the background - move out to a separate file
	var settings = {
	    backgroundColor: "#8CD1E6",
	    pathColor: "gray"
	};
	
	// Drawing the background
	backgroundContext.fillStyle = settings.backgroundColor;
	backgroundContext.fillRect(0, 0, background.width, background.height);
	
	/* Main path will go from [0, 500], [75, 500], [75, 100], [225, 100], [225, 500], [375, 500], [375, 100], [525, 100], [525, 500], [675, 500], [675, 100], [825, 100], [825, 500], [900, 500] */
	
	// Drawing the path - width of the path is 50px
	backgroundContext.fillStyle = settings.pathColor;
	
	backgroundContext.beginPath();
	
	// For the bottom part of the path
	backgroundContext.moveTo(0, 525);
	
	backgroundContext.lineTo(100, 525);
	backgroundContext.lineTo(100, 125); // Top
	backgroundContext.lineTo(200, 125);
	backgroundContext.lineTo(200, 525); // Bottom
	backgroundContext.lineTo(400, 525);
	backgroundContext.lineTo(400, 125); // Top
	backgroundContext.lineTo(500, 125);
	backgroundContext.lineTo(500, 525); // Bottom
	backgroundContext.lineTo(700, 525);
	backgroundContext.lineTo(700, 125); // Top
	backgroundContext.lineTo(800, 125);
	backgroundContext.lineTo(800, 525); // Bottom
	
	//Middle section to the side
	backgroundContext.lineTo(900, 525);
	backgroundContext.lineTo(900, 475);
	backgroundContext.lineTo(850, 475);
	
	// For the top part of the path
	backgroundContext.lineTo(850, 75);
	backgroundContext.lineTo(650, 75);
	backgroundContext.lineTo(650, 475);
	backgroundContext.lineTo(550, 475);
	backgroundContext.lineTo(550, 75);
	backgroundContext.lineTo(350, 75);
	backgroundContext.lineTo(350, 475);
	backgroundContext.lineTo(250, 475);
	backgroundContext.lineTo(250, 75);
	backgroundContext.lineTo(50, 75);
	backgroundContext.lineTo(50, 475);
	
	// End section
	backgroundContext.lineTo(0, 475);
	
	backgroundContext.fill();
	// backgroundContext.lineTo();
	
	// draw a grid (for development purposes)
	var width = 900,
	    height = 600;
	// draw vertical lines
	for (var i = 0; i < width; i += 25) {
	    backgroundContext.moveTo(i, 0);
	    backgroundContext.lineTo(i, height);
	    backgroundContext.stroke();
	}
	// draw horizontal lines
	for (var i = 0; i < height; i += 25) {
	    backgroundContext.moveTo(0, i);
	    backgroundContext.lineTo(width, i);
	    backgroundContext.stroke();
	}

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	// Initiate all the components
	var Tower = __webpack_require__(4),
	    GameEngine = __webpack_require__(9);
	
	// Import and declare utility functions
	var utils = __webpack_require__(6);
	
	var constants = __webpack_require__(7),
	    towerData = __webpack_require__(5);
	
	// Cache reused DOM elements
	var infoName = document.getElementById("info-name"),
	    infoIcon = document.getElementById("info-icon"),
	    infoBox1 = document.getElementById("info-box-1"),
	    infoBox2 = document.getElementById("info-box-2"),
	    infoBox3 = document.getElementById("info-box-3"),
	    infoBox4 = document.getElementById("info-box-4"),
	    levelInfo = document.getElementById("level"),
	    goldInfo = document.getElementById("gold"),
	    livesInfo = document.getElementById("lives"),
	    towerCards = document.getElementsByClassName("tower-card"),
	    towerCardList = [];
	
	// Convert from nodelist to array
	towerCards = Array.prototype.slice.call(towerCards);
	
	/*
	Create state variables - These are modified on user interaction events
	State variables
	activeCanvasElement - Changed on a mouse click event on a monster, tower or nothing
	activeTowerSelected - The name of the tower that is being placed by the user
	activeMessage - Message displayed in the canvas (can be used for new levels, invalid tower placements, etc)
	canvasMousePosition -
	    onCanvas - boolean to represent whether the mouse is currently on the canvas
	    towerPosition - object with a grid value and coordinate value and sides
	        grid - the top left block of the tower being placed - towers are a 2x2 grid
	        coordinate - the top left corner coordinate
	        sides - 50 px
	    mousePosition - the current mouse coordinates
	*/
	
	var activeCanvasElement = { type: null },
	    activeTowerSelected = null,
	    activeMessage = { message: null },
	    canvasMousePosition = {
	    onCanvas: false,
	    towerPosition: {},
	    mousePosition: {}
	};
	
	//  creates global variables
	window.game = new GameEngine(); // Privatize this later
	window.dynamicCanvas = document.getElementById('dynamic');
	window.dynamicContext = dynamicCanvas.getContext('2d');
	
	// Declare the game loop
	var lastTime;
	function gameLoop() {
	    var now = Date.now(),
	        dt = (now - lastTime) / 1000.0; // Convert to seconds
	
	    game.runCycle(dt);
	
	    lastTime = now;
	    // Renders methods based on state variables
	    game.render();
	    updateGameDependentInformation();
	    renderTowerPlacement();
	    renderMessage(dt);
	    requestAnimationFrame(gameLoop);
	}
	
	/* ================== Render functions =================*/
	/* =====================================================*/
	
	function updateGameDependentInformation() {
	    livesInfo.innerHTML = game.userLives;
	    goldInfo.innerHTML = game.userGold;
	    levelInfo.innerHTML = game.level;
	
	    if (activeCanvasElement.type === "monster") {
	        document.getElementById("monsterHp").innerHTML = Math.floor(game.activeMonsters[activeCanvasElement.index].currentHp);
	    } else if (activeCanvasElement.type === "tower") {
	        // Add any relevant tower information here
	    }
	}
	
	// Moved this outside of the gameLoop, will only update the relevant data when necessary
	function updateInformationPanel() {
	    if (activeCanvasElement.type === "monster") {
	        renderMonsterInformation(activeCanvasElement.index);
	    } else if (activeCanvasElement.type === "tower") {
	        renderTowerInformation(activeCanvasElement.index);
	    } else {
	        renderDefaultInformation();
	    }
	}
	
	// ID refers to the type of monster and index is the index of the active monster in the active monster's array
	function renderMonsterInformation(index) {
	    var currentHp = Math.floor(game.activeMonsters[index].currentHp),
	        maxHp = game.activeMonsters[index].maxHp,
	        type = game.activeMonsters[index].type,
	        id = game.activeMonsters[index].id;
	
	    infoName.innerHTML = id;
	    // Change icon to active monster - use a sprite
	    infoBox1.innerHTML = "HP: <span id='monsterHp'>" + currentHp + "</span> / " + maxHp;
	    infoBox2.innerHTML = "Type: " + type;
	    infoBox3.innerHTML = "Strengths: ";
	    infoBox4.innerHTML = "Weaknesses: ";
	}
	
	// ID refers to the type of tower and index is the index of the active tower in the active tower's array
	// TODO add number of targetrs
	function renderTowerInformation(index) {
	    var id = game.towers[index].id,
	        damage = towerData[id].projectile.damage,
	        type = towerData[id].projectile.type,
	        effect = "",
	        range = game.towers[index].range,
	        speed = game.towers[index].attackSpeed,
	        upgradeAvailable = towerData[id].upgrade.length !== 0;
	
	    for (key in towerData[id].projectile.effects) {
	        console.log(towerData);
	        console.log(id);
	        console.log(key);
	        effect += key + " ";
	        // Todo map information about effects
	    }
	
	    infoName.innerHTML = id;
	    // Change icon to tower monster - use a sprite
	    infoBox1.innerHTML = "Damage: " + damage + " <br>Range: " + range + "<br>Effect: " + effect;
	    infoBox2.innerHTML = "Attack Speed: " + speed + "<br>Type: " + type;
	    infoBox3.innerHTML = upgradeAvailable ? "<a class='waves-effect waves-light btn red' id='upgradeButton'>Upgrade</a>" : "";
	    infoBox4.innerHTML = "<a class='waves-effect waves-light btn red' id='sellButton'>Sell</a>";
	}
	
	function renderDefaultInformation() {
	    infoName.innerHTML = "Awesome TD";
	    // Change icon to default image - use a sprite
	    infoBox1.innerHTML = "This is some text";
	    infoBox2.innerHTML = "This is different text";
	    infoBox3.innerHTML = "This is ??? text";
	    infoBox4.innerHTML = "This 1231241235";
	}
	
	function renderMessage(dt) {
	    if (activeMessage.message === null) {
	        return;
	    } else {
	        dynamicContext.globalAlpha = activeMessage.timer > 0 ? activeMessage.timer : 0; // Sets transparency to 0 if a negative number
	        dynamicContext.font = constants.MESSAGEFONT;
	        dynamicContext.textAlign = "center";
	        dynamicContext.fillStyle = constants.MESSAGECOLOR;
	        dynamicContext.fillText(activeMessage.message, constants.CANVASWIDTH / 2, 50);
	        dynamicContext.globalAlpha = 1;
	
	        if (activeMessage.timer <= 0) {
	            activeMessage = { message: null }; // Reset message
	        } else {
	            activeMessage.timer -= dt;
	        }
	    }
	}
	
	function renderTowerPlacement() {
	    if (activeTowerSelected === null || !canvasMousePosition.onCanvas) {
	        return;
	    };
	
	    var coordinates = canvasMousePosition.towerPosition.coordinates;
	    dynamicContext.beginPath();
	    dynamicContext.globalAlpha = 0.5;
	
	    // Draw grid validation placement
	    if (game.validateTowerPlacement(canvasMousePosition.towerPosition.grid)) {
	        dynamicContext.fillStyle = "green";
	    } else {
	        dynamicContext.fillStyle = "red";
	    }
	    dynamicContext.fillRect(coordinates.x, coordinates.y, constants.TOWERLENGTH, constants.TOWERLENGTH);
	
	    // Draw tower
	    dynamicContext.globalAlpha = 0.7;
	    dynamicContext.arc(coordinates.x + constants.TOWERLENGTH / 2, coordinates.y + constants.TOWERLENGTH / 2, constants.TOWERLENGTH * 0.6, 0, 2 * Math.PI, false);
	    dynamicContext.fillStyle = 'gray';
	    dynamicContext.fill();
	
	    dynamicContext.globalAlpha = 1;
	    dynamicContext.closePath();
	}
	
	/* ================ UI Event Listeners =================*/
	/* =====================================================*/
	document.getElementById("mainModal").addEventListener("click", modalClick);
	
	/*
	These event listeners control the application by interacting with the game
	object and by changing the state variables (which the render functions use
	to read)
	*/
	towerCards.forEach(function (towerCard, i) {
	    towerCardList.push(towerCard.getAttribute("data-tower"));
	    towerCard.addEventListener("click", towerCardClick);
	});
	
	document.getElementById("dynamic").onmousemove = onCanvasMouseMovement;
	document.getElementById("dynamic").addEventListener("click", canvasClick);
	
	document.onkeydown = function (e) {
	    if (e.keyCode === 27) {
	        cancelTowerPlacement();
	    }
	};
	
	// updates activeCanvasElement when monster death or tower removed affects the current selected target
	document.addEventListener("unitRemoved", function (e) {
	    // Updates if the active element is the same as the type of unit removed
	    if (activeCanvasElement.type === e.detail.element) {
	        if (e.detail.index < activeCanvasElement.index) {
	            activeCanvasElement.index--; // Update positioning in element
	        } else if (e.detail.index === activeCanvasElement.index) {
	            activeCanvasElement = { type: null }; // Reset
	        }
	        updateInformationPanel();
	    }
	});
	
	// Adds event listeners only to the info box
	document.getElementsByClassName("side-section left")[0].addEventListener("click", function (e) {
	    if (activeCanvasElement.type === "tower") {
	        if (e.target.id === "upgradeButton") {
	            showUpgradeOptions(activeCanvasElement.index);
	        } else if (e.target.id === "sellButton") {
	            sellTower();
	        }
	    }
	});
	
	/* =================== UI Functions ====================*/
	/* =====================================================*/
	function modalClick(e) {
	    var clickTarget = e.target.getAttribute("data-action");
	
	    switch (clickTarget) {
	        case "start":
	            startGame();
	            break;
	        case "information":
	            console.log("show information container here");
	            break;
	        case "upgrade":
	            var upgradeName = e.target.getAttribute("data-upgradename");
	            upgradeTower(activeCanvasElement.index, upgradeName);
	            break;
	        default:
	            return;
	    }
	    document.getElementById("mainModal").style.display = "none";
	    document.getElementsByClassName("modal-background")[0].style.display = "none";
	}
	
	function startGame() {
	    game.gameStart();
	    // Sets up game loop and render loop
	    lastTime = Date.now();
	    gameLoop();
	}
	
	/* Click event listener on the tower cards
	Used to control what tower is being actively placed on the canvas
	4 possible flows based on the state of the interface
	1) The tower that was clicked is currently disabled:
	    -> function returns
	2) No towers are actively being placed
	    -> the clicked tower card now becomes the active tower being placed
	3) The clicked tower is the same as the tower actively being placed
	    -> the state is reset so that no towers are actively being placed
	4) The clicked tower is different from the tower actively being placed
	    -> the state is changed to the clicked tower becoming the active tower
	*/
	function towerCardClick() {
	
	    var towerName = this.getAttribute("data-tower"),
	        oldTowerIndex = towerCardList.indexOf(activeTowerSelected),
	        newTowerIndex = towerCardList.indexOf(towerName);
	
	    if (/disabled/i.test(this.className)) {
	        return;
	    } else if (activeTowerSelected === null) {
	        activeTowerSelected = towerName;
	        utils.addClass(towerCards[newTowerIndex], "active");
	        canvasMousePosition.onCanvas = false;
	    } else if (activeTowerSelected === towerName) {
	        cancelTowerPlacement();
	        canvasMousePosition.onCanvas = false;
	    } else {
	        utils.removeClass(towerCards[oldTowerIndex], "active");
	        activeTowerSelected = towerName;
	        utils.addClass(towerCards[newTowerIndex], "active");
	        canvasMousePosition.onCanvas = false;
	    }
	}
	
	/*
	Called from towerCardClick (when clicking the active tower card) and on an escape key press
	Resets the active tower placement state to null
	*/
	function cancelTowerPlacement() {
	    utils.removeClass(towerCards[towerCardList.indexOf(activeTowerSelected)], "active");
	    activeTowerSelected = null;
	}
	
	/* Mouse move event listener on the canvas
	If the active tower selected state (a tower is being placed by the user):
	    -> update the position of the mouse on the canvas (used by the renderTowerPlacement function)
	otherwise:
	    -> do nothing
	*/
	function onCanvasMouseMovement(e) {
	    if (activeTowerSelected === null) {
	        return;
	    };
	
	    var canvasContainer = this.getBoundingClientRect(),
	        position = {};
	
	    position.x = e.clientX - canvasContainer.left;
	    position.y = e.clientY - canvasContainer.top;
	    canvasMousePosition.mousePosition = position;
	    canvasMousePosition.towerPosition = utils.convertPositionToTower(position);
	    canvasMousePosition.onCanvas = true;
	};
	
	/* Click event listener on the canvas
	Handles two possible canvas click scenarios
	1) A tower is selected and is actively being placed
	    -> Clicking will validate the tower placement and check the user's gold
	    if both are valid, will tower will be placed (by game object)
	    otherwise, an error message will show up
	2) A tower is not selected and is not being placed
	    -> Will check whether the click position overlaps with the bounding
	    rectangle of monster or tower - if so, it will return the information
	    in the information container
	*/
	function canvasClick(e) {
	    // Get click location relative to the canvas element
	    var canvasContainer = this.getBoundingClientRect(),
	        position = {},
	        towerGridPosition = canvasMousePosition.towerPosition.grid,
	        towerCoordinates = canvasMousePosition.towerPosition.coordinates; // Passes in grid blocks - this is the topLeft block
	
	    position.x = e.clientX - canvasContainer.left;
	    position.y = e.clientY - canvasContainer.top;
	
	    // Runs if the user is placing a tower
	    if (activeTowerSelected !== null) {
	        var towerName = activeTowerSelected,
	            towerPlaced = game.placeTower(towerName, towerGridPosition, towerCoordinates);
	
	        // If the tower was not placed, show an error message
	        if (!towerPlaced.placed) {
	            activeMessage = {
	                message: towerPlaced.message,
	                timer: constants.MESSAGEDURATION // seconds
	            };
	        }
	
	        utils.removeClass(towerCards[towerCardList.indexOf(activeTowerSelected)], "active");
	        activeTowerSelected = null;
	    } else {
	        // User is not running a tower placement
	        activeCanvasElement = game.checkClickLocation(position);
	        updateInformationPanel();
	    }
	}
	
	function sellTower() {
	    var sellPrice = game.sellTower(activeCanvasElement.index);
	    activeMessage = {
	        message: constants.MESSAGETOWERSOLD + sellPrice + " Gold",
	        timer: constants.MESSAGEDURATION // seconds
	    };
	    updateInformationPanel();
	}
	
	// At the moment expects only towers with upgrades should be able to access this
	function showUpgradeOptions(towerIndex) {
	    // Figure out where to show the upgrade contianer
	    document.getElementById("mainModal").style.display = "block";
	    document.getElementsByClassName("modal-background")[0].style.display = "block";
	
	    var towerId = game.towers[towerIndex].id,
	        upgrades = towerData[towerId].upgrade;
	
	    // Todo move HTML out into a template
	    var title = "Upgrade Tower",
	        content = "";
	
	    upgrades.forEach(function (upgradeObj) {
	        var towerDataObject = towerData[upgradeObj.name];
	        content += "<a class='waves-effect waves-light btn-large red' data-action='upgrade' data-upgradename='" + upgradeObj.name + "'> " + upgradeObj.name + "  Upgrade</a>";
	    });
	
	    document.getElementById("mainModalTitle").innerHTML = title;
	    document.getElementById("mainModalContent").innerHTML = content;
	}
	
	function upgradeTower(towerIndex, upgradeName) {
	    var upgraded = game.upgradeTower(towerIndex, upgradeName);
	    if (upgraded) {
	        updateInformationPanel();
	    } else {
	        activeMessage = {
	            message: constants.MESSAGENOTENOUGHGOLD,
	            timer: constants.MESSAGEDURATION // seconds
	        };
	    }
	}

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var towerData = __webpack_require__(5),
	    utils = __webpack_require__(6),
	    Projectile = __webpack_require__(8),
	    constants = __webpack_require__(7);
	
	// Position refers to the upper left corner of the elements
	// Tower width - 50 x 50
	var Tower = function Tower(position, id) {
	    if (towerData[id] === undefined) {
	        throw new Error("Invalid tower name, check html dataattribute or towerdata");
	    }
	    this.id = id;
	    this.attackSpeed = towerData[id].attackSpeed; // Attack speed
	    this.cooldown = 0;
	    this.range = towerData[id].range; // Range of the tower
	    this.effects = towerData[id].effects; // Special effect (e.g. slow, splash, etc)
	    this.goldCost = towerData[id].goldCost;
	    this.totalCost = towerData[id].totalCost;
	    this.upgrade = towerData[id].upgrade;
	    this.targets = towerData[id].targets;
	    this.position = position; // object with x and y coordinates - references the top left corner of the tower
	    this.position.sideLength = constants.TOWERLENGTH;
	};
	// Method the game object uses to run towers
	Tower.prototype.runCycle = function (activeMonsters, dt) {
	    var _this = this;
	
	    var targetMonster = null;
	
	    if (this.cooldown < 0) {
	        // Creates projectiles up to the number of targets specified by the tower
	        var firedShots = 0;
	        activeMonsters.forEach(function (monster) {
	            if (_this.checkInRange(monster.position) && firedShots < _this.targets) {
	                monster.projectiles.push(new Projectile(_this.id, _this.position));
	                firedShots++;
	            }
	        });
	
	        this.cooldown = this.attackSpeed;
	    }
	
	    if (this.cooldown >= 0) {
	        this.cooldown -= dt;
	    }
	};
	
	// Takes in a monster's position and checks whether that is in range based on the range - returns true or false if in range which can be used to
	Tower.prototype.checkInRange = function (monsterPosition) {
	    // using sqrt((x2-x1)^2 - (y2-y1)^2)
	    var monsterDistance = utils.getPositionDifference(monsterPosition, this.position);
	
	    if (monsterDistance <= this.range) {
	        return true;
	    } else {
	        return false;
	    }
	};
	
	// TODO figure out a better way to render towers
	Tower.prototype.draw = function () {
	    dynamicContext.beginPath();
	    dynamicContext.fillStyle = "green";
	    dynamicContext.fillRect(this.position.x, this.position.y, constants.TOWERLENGTH, constants.TOWERLENGTH);
	    dynamicContext.closePath();
	};
	
	module.exports = Tower;

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	
	// This should probably be in a database
	module.exports = {
	    // Basic tower tree here
	    basic: {
	        projectile: {
	            damage: 5,
	            travelTime: 0.5, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal", //
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 1, // 1 second per attack
	        range: 300,
	        goldCost: 10,
	        totalCost: 10, // Used for upgraded towers
	        upgrade: [{
	            name: "advanced"
	        }, {
	            name: "multishot"
	        }]
	    },
	    advanced: {
	        projectile: {
	            damage: 15,
	            travelTime: 0.5, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 20,
	        totalCost: 30,
	        upgrade: [{
	            name: "expert"
	        }]
	    },
	    expert: {
	        projectile: {
	            damage: 45,
	            travelTime: 0.5, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 60,
	        totalCost: 90,
	        upgrade: []
	    },
	    multishot: {
	        projectile: {
	            damage: 5,
	            travelTime: 0.5, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 3,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 20,
	        totalCost: 30,
	        upgrade: [{
	            name: "expertMultishot"
	        }]
	    },
	    expertMultishot: {
	        projectile: {
	            damage: 30,
	            travelTime: 0.5, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 4,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 100,
	        totalCost: 130,
	        upgrade: []
	    },
	
	    // Heavy tower tree here
	    heavy: {
	        projectile: {
	            damage: 15,
	            travelTime: 0.8, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 2,
	        range: 250,
	        goldCost: 10,
	        totalCost: 10,
	        upgrade: [{
	            name: "siege"
	        }, {
	            name: "cannon"
	        }]
	    },
	    siege: {
	        projectile: {
	            damage: 40,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 2,
	        range: 350,
	        goldCost: 30,
	        totalCost: 40,
	        upgrade: [{
	            name: "demolition"
	        }, {
	            name: "explosion"
	        }]
	    },
	    demolition: {
	        projectile: {
	            damage: 100,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 1.5,
	        range: 500,
	        goldCost: 100,
	        totalCost: 140,
	        upgrade: []
	    },
	    explosion: {
	        projectile: {
	            damage: 60,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {
	                splash: {
	                    radius: 200
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 1.5,
	        range: 500,
	        goldCost: 100,
	        totalCost: 140,
	        upgrade: []
	    },
	    cannon: {
	        projectile: {
	            damage: 20,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {
	                amplify: {
	                    amount: 1.5,
	                    timer: 3
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 1,
	        range: 350,
	        goldCost: 30,
	        totalCost: 40,
	        upgrade: [{
	            name: "shrapnel"
	        }, {
	            name: "artillery"
	        }]
	    },
	    shrapnel: {
	        projectile: {
	            damage: 40,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {
	                amplify: {
	                    amount: 1.5,
	                    timer: 3
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 3,
	        attackSpeed: 1,
	        range: 350,
	        goldCost: 80,
	        totalCost: 120,
	        upgrade: []
	    },
	    artillery: {
	        projectile: {
	            damage: 70,
	            travelTime: 0.3, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "normal",
	            effects: {
	                amplify: {
	                    amount: 2,
	                    timer: 3
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 1,
	        range: 600,
	        goldCost: 110,
	        totalCost: 150,
	        upgrade: []
	    },
	
	    // Fire tower tree here
	    fire: {
	        projectile: {
	            damage: 10,
	            travelTime: 0.3, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "fire",
	            effects: {
	                dot: {
	                    amount: 5, // dps
	                    timer: 2
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.6,
	        range: 300,
	        goldCost: 30,
	        totalCost: 30,
	        upgrade: [{
	            name: "broiler"
	        }, {
	            name: "flamethrower"
	        }]
	    },
	    broiler: {
	        projectile: {
	            damage: 8,
	            travelTime: 0.01, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "fire",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 30,
	        attackSpeed: 0.2,
	        range: 300,
	        goldCost: 60,
	        totalCost: 90,
	        upgrade: [{
	            name: "volcano"
	        }, {
	            name: "inferno"
	        }]
	    },
	    volcano: {
	        projectile: {
	            damage: 20,
	            travelTime: 0.01, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "fire",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 30,
	        attackSpeed: 0.2,
	        range: 300,
	        goldCost: 110,
	        totalCost: 200,
	        upgrade: []
	    },
	    inferno: {
	        projectile: {
	            damage: 15,
	            travelTime: 0.01, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "fire",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 30,
	        attackSpeed: 0.2,
	        range: 500,
	        goldCost: 110,
	        totalCost: 200,
	        upgrade: []
	    },
	    flamethrower: {
	        projectile: {
	            damage: 20,
	            travelTime: 0.01, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "fire",
	            effects: {
	                dot: {
	                    amount: 10, // dps
	                    timer: 3
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.5,
	        range: 300,
	        goldCost: 60,
	        totalCost: 90,
	        upgrade: [{
	            name: "napalm"
	        }]
	    },
	    napalm: {
	        projectile: {
	            damage: 50,
	            travelTime: 0.01, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "fire",
	            effects: {
	                dot: {
	                    amount: 30, // dps
	                    timer: 4
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.5,
	        range: 400,
	        goldCost: 90,
	        totalCost: 150,
	        upgrade: []
	    },
	
	    // Ice starts here
	    ice: {
	        projectile: {
	            damage: 10,
	            travelTime: 0.8, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "ice",
	            effects: {
	                slow: {
	                    amount: 0.3, // %slow
	                    timer: 2
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.8,
	        range: 300,
	        goldCost: 30,
	        totalCost: 30,
	        upgrade: [{
	            name: "blizzard"
	        }, {
	            name: "frost"
	        }]
	    },
	    blizzard: {
	        projectile: {
	            damage: 5,
	            travelTime: 0.2, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "ice",
	            effects: {
	                slow: {
	                    amount: 0.4, // %slow
	                    timer: 3
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 30,
	        attackSpeed: 0.8,
	        range: 300,
	        goldCost: 70,
	        totalCost: 100,
	        upgrade: [{
	            name: "arctic"
	        }]
	    },
	    arctic: {
	        projectile: {
	            damage: 12,
	            travelTime: 0.2, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "ice",
	            effects: {
	                slow: {
	                    amount: 0.5, // %slow
	                    timer: 3
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 30,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 70,
	        totalCost: 170,
	        upgrade: []
	    },
	    frost: {
	        projectile: {
	            damage: 25,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "ice",
	            effects: {
	                slow: {
	                    amount: 0.5, // %slow
	                    timer: 3
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.8,
	        range: 300,
	        goldCost: 60,
	        totalCost: 90,
	        upgrade: [{
	            name: "tundra"
	        }, {
	            name: "permafrost"
	        }]
	    },
	    tundra: {
	        projectile: {
	            damage: 40,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "ice",
	            effects: {
	                slow: {
	                    amount: 0.65, // %slow
	                    timer: 3
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 90,
	        totalCost: 180,
	        upgrade: []
	    },
	    permafrost: {
	        projectile: {
	            damage: 30,
	            travelTime: 0.6, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "ice",
	            effects: {
	                freeze: {
	                    chance: 0.2,
	                    timer: 1
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.8,
	        range: 400,
	        goldCost: 120,
	        totalCost: 210,
	        upgrade: []
	    },
	    // Light tower tree here
	    light: {
	        projectile: {
	            damage: 5,
	            travelTime: 0.1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "light",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.4,
	        range: 500,
	        goldCost: 30,
	        totalCost: 30,
	        upgrade: [{
	            name: "laser"
	        }, {
	            name: "electric"
	        }]
	    },
	    laser: {
	        projectile: {
	            damage: 15,
	            travelTime: 0.1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "light",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.3,
	        range: 600,
	        goldCost: 60,
	        totalCost: 90,
	        upgrade: [{
	            name: "prism"
	        }]
	    },
	    prism: {
	        projectile: {
	            damage: 50,
	            travelTime: 0.1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "light",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.2,
	        range: 600,
	        goldCost: 180,
	        totalCost: 270,
	        upgrade: [{
	            name: "prism"
	        }]
	    },
	    electric: {
	        projectile: {
	            damage: 15,
	            travelTime: 0.1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "light",
	            effects: {
	                bounce: {
	                    amount: 2,
	                    range: 300
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.6,
	        range: 400,
	        goldCost: 60,
	        totalCost: 90,
	        upgrade: [{
	            name: "lightning"
	        }, {
	            name: "generator"
	        }]
	    },
	    lightning: {
	        projectile: {
	            damage: 35,
	            travelTime: 0.1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "light",
	            effects: {
	                bounce: {
	                    amount: 2,
	                    range: 300
	                }
	            }
	        },
	        sprite: "TODO",
	        targets: 1,
	        attackSpeed: 0.6,
	        range: 400,
	        goldCost: 90,
	        totalCost: 180,
	        upgrade: []
	    },
	    generator: {
	        projectile: {
	            damage: 35,
	            travelTime: 0.1, // time in seconds before impact
	            sprite: "TODO", // change this to have animations
	            type: "light",
	            effects: {}
	        },
	        sprite: "TODO",
	        targets: 3,
	        attackSpeed: 0.6,
	        range: 400,
	        goldCost: 90,
	        totalCost: 180,
	        upgrade: []
	    }
	
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var constants = __webpack_require__(7);
	
	/* ================== Public functions =================*/
	/* =====================================================*/
	function addClass(element, cssClass) {
	    if (element.className === "") {
	        element.className = cssClass;
	    } else {
	        element.className += " " + cssClass;
	    }
	}
	
	/*
	checkIfInSquare checks whether a point is in a square (which is a monster or a tower)
	
	Takes in three arguments
	point - a object with x and y coordinates
	topLeftPoint - an object with x and y coordinates of the top left corner of the square
	sideLength - the length of the square
	
	Returns a boolean - true if the click overlaps with an element and false
	                    if it does not
	*/
	function checkIfInSquare(point, topLeftPoint, sideLength) {
	    return point.x >= topLeftPoint.x && point.x <= topLeftPoint.x + sideLength && point.y >= topLeftPoint.y && point.y <= topLeftPoint.y + sideLength;
	}
	
	/*
	Takes in a distance (int) and pathLines(array of path objects) and converts it to coordinates for a monster
	Returns a coordinate object
	*/
	function convertDistanceToCoordinates(distance, pathLines) {
	    var coordinates,
	        end = false; // Boolean to represent whether the monster is at the end
	
	
	    for (var i = 0; i < pathLines.length; i++) {
	        if (distance - pathLines[i].distance <= 0) {
	            break;
	        } else {
	            distance -= pathLines[i].distance;
	        }
	    }
	
	    if (i === pathLines.length) {
	        i--; // Set the counter value to be the last value in the pathlines array
	        distance = pathLines[i].distance;
	        end = true;
	    }
	
	    // Create a new object to return (instead of modifiying startPoint object)
	    coordinates = Object.create(pathLines[i].startPoint);
	    coordinates.end = end;
	
	    // Case for when monster is at the end of the thingy - there is a better way to write this but not right now
	    if (!end) {
	        switch (pathLines[i].direction) {
	            // 15 is a half of the monster width
	            // values used to offset the positioning based on the monster direciton movement
	            case "up":
	                coordinates.x -= constants.MONSTERLENGTH / 2;
	                coordinates.y -= distance + constants.MONSTERLENGTH / 2;
	                break;
	            case "down":
	                coordinates.x -= constants.MONSTERLENGTH / 2;
	                coordinates.y += distance - constants.MONSTERLENGTH / 2;
	                break;
	            case "left":
	                coordinates.x -= distance + constants.MONSTERLENGTH / 2;
	                coordinates.y -= constants.MONSTERLENGTH / 2;
	                break;
	            case "right":
	                coordinates.x += distance - constants.MONSTERLENGTH / 2;
	                coordinates.y -= constants.MONSTERLENGTH / 2;
	                break;
	            default:
	                throw new Error("Invalid direction provided in pathLines");
	        }
	    } else {
	        switch (pathLines[i].direction) {
	            case "up":
	                coordinates.y -= pathLines[i].distance;
	                break;
	            case "down":
	                coordinates.y += pathLines[i].distance;
	                break;
	            case "left":
	                coordinates.x -= pathLines[i].distance;
	                break;
	            case "right":
	                coordinates.x += pathLines[i].distance;
	                break;
	            default:
	                throw new Error("Invalid direction provided in pathLines");
	        }
	    }
	
	    return coordinates;
	}
	
	// Takes in a position object with coordinates{x, y}
	// returns a block object {x, y} with block numbers
	// Handles edge cases of the block being defined at the edge (36 and 24 which are invalid in the )
	function convertToBlock(position) {
	    var xGridAmount = constants.CANVASWIDTH / constants.GRIDSIZE,
	        yGridAmount = constants.CANVASHEIGHT / constants.GRIDSIZE;
	
	    if (position.x > xGridAmount * (constants.TOWERLENGTH / 2) || position.y > yGridAmount * (constants.TOWERLENGTH / 2)) {
	        console.log(position);
	        throw new Error("Position out of grid range");
	    }
	
	    var block = {
	        x: Math.floor(position.x / (constants.TOWERLENGTH / 2)),
	        y: Math.floor(position.y / (constants.TOWERLENGTH / 2))
	    };
	    // Adjusts if mouse is at end of container
	    // 36 blocks width and 24 blocks height
	    if (block.x >= xGridAmount - 1) {
	        block.x--;
	    }
	
	    if (block.y >= yGridAmount - 1) {
	        block.y--;
	    }
	
	    return block;
	}
	
	/*
	Takes in a position object (x and y coordinates)
	Returns the top left block position and topleft coordinate of the tower
	Grid blocks are in 25x25 block increments
	*/
	function convertPositionToTower(position) {
	    var towerPosition = {
	        grid: {},
	        coordinates: {},
	        side: constants.TOWERLENGTH
	    },
	        xGridAmount = constants.CANVASWIDTH / constants.GRIDSIZE,
	        yGridAmount = constants.CANVASHEIGHT / constants.GRIDSIZE;
	
	    towerPosition.grid = convertToBlock(position);
	
	    // Container width and height 900 and 600 px respectively
	    towerPosition.coordinates.x = towerPosition.grid.x / xGridAmount * constants.CANVASWIDTH;
	    towerPosition.coordinates.y = towerPosition.grid.y / yGridAmount * constants.CANVASHEIGHT;
	    return towerPosition;
	}
	/*
	getPathPosition inputs:
	initialPosition: position object {x, y}
	finalPosition: position object {x, y}
	fractionTravelled: decimal of how far along the path
	
	Output: position object {x, y}
	*/
	function getPathPosition(pos1, pos2, fractionTravelled) {
	    var finalPosition = {},
	        angle = Math.atan2(pos2.y - pos1.y, pos2.x - pos1.x),
	        // the line angle (in radians) from pos1 to pos2 with respect to the origin
	    distanceFromPos1 = getPositionDifference(pos1, pos2) * fractionTravelled;
	
	    finalPosition.x = pos1.x + distanceFromPos1 * Math.cos(angle);
	    finalPosition.y = pos1.y + distanceFromPos1 * Math.sin(angle);
	
	    return finalPosition;
	}
	
	function getPositionDifference(position1, position2) {
	    return Math.sqrt(Math.pow(position1.x - position2.x, 2) + Math.pow(position1.y - position2.y, 2));
	}
	
	function removeClass(element, cssClass) {
	    var arrayOfClasses = element.className.split(" ");
	    for (var i = 0, j = arrayOfClasses.length; i < j; i++) {
	        if (arrayOfClasses[i] === cssClass) {
	            arrayOfClasses.splice(i, 1);
	            i--;j--;
	        }
	    }
	    element.className = arrayOfClasses.join(" ");
	}
	
	module.exports = {
	    addClass: addClass,
	    checkIfInSquare: checkIfInSquare,
	    convertToBlock: convertToBlock,
	    convertDistanceToCoordinates: convertDistanceToCoordinates,
	    convertPositionToTower: convertPositionToTower,
	    getPathPosition: getPathPosition,
	    getPositionDifference: getPositionDifference,
	    removeClass: removeClass
	};

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	    CANVASWIDTH: 900, // probably need a way to set the html canvas size from here
	    CANVASHEIGHT: 600, // probably need a way to set the html canvas size from here
	    GRIDSIZE: 25,
	    TOWERLENGTH: 50,
	    MONSTERLENGTH: 30,
	    PROJECTILELENGTH: 10,
	    TIMEBETWEENMONSTERCREATE: 1, // second
	    TIMEBETWEENLEVELS: 2, // seconds
	    FINALLEVEL: 50,
	    STARTINGGOLD: 10,
	    STARTINGLIVES: 30,
	    MESSAGEFONT: '40pt Droid Sans',
	    MESSAGECOLOR: 'red',
	    MESSAGEDURATION: 0.8,
	    MESSAGEINVALIDPLACEMENT: "Invalid Tower Placement",
	    MESSAGENOTENOUGHGOLD: "Not Enough Gold",
	    MESSAGETOWERSOLD: "Tower Sold For "
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var towerData = __webpack_require__(5),
	    utils = __webpack_require__(6),
	    constants = __webpack_require__(7);
	
	// Projectiles are attached to monsters
	var Projectile = function Projectile(id, towerPosition) {
	    this.id = id;
	    this.damage = towerData[id].projectile.damage;
	    this.totalTravelTime = towerData[id].projectile.travelTime;
	    this.sprite = towerData[id].projectile.sprite;
	    this.type = towerData[id].projectile.type;
	    this.effects = {};
	
	    for (var key in towerData[id].projectile.effects) {
	        this.effects[key] = Object.assign({}, towerData[id].projectile.effects[key]);
	    }
	
	    this.currentTravelTime = 0;
	    this.end = false;
	    this.initialPosition = {
	        x: towerPosition.x + constants.TOWERLENGTH / 2 - constants.PROJECTILELENGTH / 2,
	        y: towerPosition.y + constants.TOWERLENGTH / 2 - constants.PROJECTILELENGTH / 2
	    };
	};
	
	Projectile.prototype.draw = function (monsterPosition) {
	    var fractionTravelled = this.currentTravelTime / this.totalTravelTime,
	        adjustedMonsterPosition = {
	        x: monsterPosition.x + constants.MONSTERLENGTH / 2 - constants.PROJECTILELENGTH / 2,
	        y: monsterPosition.y + constants.MONSTERLENGTH / 2 - constants.PROJECTILELENGTH / 2
	    },
	        position = utils.getPathPosition(this.initialPosition, adjustedMonsterPosition, fractionTravelled);
	
	    // Calculate a fraction based on currentTravelTime / travelTime to get the position
	    dynamicContext.beginPath();
	    dynamicContext.fillStyle = "orange";
	    dynamicContext.rect(position.x, position.y, constants.PROJECTILELENGTH, constants.PROJECTILELENGTH);
	    dynamicContext.fill();
	    // Change this to use a sprite
	    // draw based on position here
	
	    dynamicContext.closePath();
	};
	
	Projectile.prototype.move = function (dt) {
	    this.currentTravelTime += dt;
	    if (this.currentTravelTime >= this.totalTravelTime) {
	        this.end = true;
	    }
	};
	
	module.exports = Projectile;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//  require Monster to gain access
	var Monster = __webpack_require__(10),
	    Tower = __webpack_require__(4),
	    Projectile = __webpack_require__(8),
	    towerData = __webpack_require__(5),
	    levelData = __webpack_require__(12),
	    utils = __webpack_require__(6),
	    pathCoordinates = __webpack_require__(13),
	    constants = __webpack_require__(7);
	
	var GameEngine = function GameEngine() {
	    this.userGold = constants.STARTINGGOLD;
	    this.level = 0;
	    this.userLives = constants.STARTINGLIVES;
	    this.activeMonsters = []; // List of active monsters in the game
	    this.towers = []; // object of tower objects
	    this.timer = constants.TIMEBETWEENMONSTERCREATE;
	    this.nextLevelCalled = false;
	    this.monstersToCreate = 0;
	    this.gameState = "start"; // Possible values are start, lost, won, playing
	    this.gamePath = _convertPathToLines(pathCoordinates.path);
	    this.gameGrid = _initiateGrid(this.gamePath);
	};
	
	GameEngine.prototype.addMonster = function (level) {
	    level--; // Change to access correct array
	    var multiplier = level / 2 + 1,
	        monster = new Monster(levelData[level].type, multiplier);
	    this.activeMonsters.push(monster);
	};
	
	GameEngine.prototype.addTower = function (id, position, gridPosition, goldCost) {
	    this.userGold -= goldCost;
	    var tower = new Tower(position, id);
	    this.towers.push(tower);
	    // Set gameGrid positioning
	    this.gameGrid[gridPosition.x][gridPosition.y] = { empty: false };
	    this.gameGrid[gridPosition.x + 1][gridPosition.y] = { empty: false };
	    this.gameGrid[gridPosition.x][gridPosition.y + 1] = { empty: false };
	    this.gameGrid[gridPosition.x + 1][gridPosition.y + 1] = { empty: false };
	};
	
	/*
	Takes in a position object (location of the click)
	Returns an object with information about what is at that position
	{type: null} if nothing found
	*/
	GameEngine.prototype.checkClickLocation = function (position) {
	    var element = {};
	    // Loops through activeMonsters
	    this.activeMonsters.some(function (activeMonster, i) {
	        if (utils.checkIfInSquare(position, activeMonster.position, activeMonster.sideLength)) {
	            element.type = "monster";
	            element.index = i;
	            return true;
	        } else {
	            return false;
	        }
	    });
	
	    // If nothing was found, loop through towers
	    if (element.type === undefined) {
	        this.towers.some(function (tower, i) {
	            if (utils.checkIfInSquare(position, tower.position, tower.position.sideLength)) {
	                element.type = "tower";
	                element.index = i;
	                return true;
	            } else {
	                return false;
	            }
	        });
	    }
	
	    // If no towers or monsters found return a type of null
	    if (element.type === undefined) {
	        element.type = null;
	    }
	
	    return element;
	};
	
	GameEngine.prototype.checkGameState = function () {
	    if (this.level === constants.FINALLEVEL + 1) {
	        // MAX level
	        this.gameState = "won";
	    } else if (this.userLives <= 0) {
	        this.gameState = "lost";
	    }
	};
	
	// method to check gold before place tower or upgrade
	GameEngine.prototype.checkGold = function (goldCost) {
	    return goldCost <= this.userGold;
	};
	
	GameEngine.prototype.gameOver = function () {};
	
	GameEngine.prototype.gameStart = function () {
	    this.gameState = "playing";
	    this.nextLevel();
	};
	
	GameEngine.prototype.gameWon = function () {};
	
	GameEngine.prototype.handleEffects = function (activeMonster, i) {
	    // TODO pull this out into an external function
	    // Handle splash,bounce here
	    if (activeMonster.effects.hasOwnProperty("splash")) {
	        // Search all monsters in range of this
	        var splashRange = activeMonster.effects.splash.radius;
	
	        this.activeMonsters.forEach(function (searchMonster, j) {
	            if (i !== j) {
	                var distance = utils.getPositionDifference(searchMonster.position, activeMonster.position);
	                if (distance < splashRange) {
	                    activeMonster.updateHp(-activeMonster.effects.splash.radius);
	                }
	            }
	        });
	        delete this.effects.splash;
	    } else if (activeMonster.effects.hasOwnProperty("bounce")) {
	        var bounceRange = activeMonster.effects.bounce.range;
	        if (activeMonster.effects.bounce.amount > 0) {
	            // search all monsters in range of bounce
	            this.activeMonsters.some(function (searchMonster, j) {
	                if (i !== j) {
	                    var distance = utils.getPositionDifference(searchMonster.position, activeMonster.position);
	                    if (distance < bounceRange) {
	                        var id = activeMonster.effects.bounce.id,
	                            position = activeMonster.position;
	
	                        position.x += constants.MONSTERLENGTH / 2 - constants.TOWERLENGTH / 2;
	                        position.y += constants.MONSTERLENGTH / 2 - constants.TOWERLENGTH / 2;
	
	                        var addedProjectile = new Projectile(id, position);
	
	                        // Reduce the number of bounces based on previous projectile
	                        // TODO figure out a way to prevent bouncing to same monster - if it matters?
	                        addedProjectile.effects.bounce.amount = activeMonster.effects.bounce.amount - 1;
	
	                        searchMonster.projectiles.push(addedProjectile);
	                        return true;
	                    } else {
	                        // Keep searching
	                        return false;
	                    }
	                }
	            });
	        }
	
	        delete activeMonster.effects.bounce;
	    }
	};
	
	GameEngine.prototype.nextLevel = function () {
	    // Only calls the next level once - nextLevelCalled is reset on a new monster creation
	    this.monstersToCreate = levelData[this.level].amount; // this.level refers to the next level
	    this.level++;
	    this.nextLevelCalled = false;
	};
	
	/*
	placeTower handles the validation of the tower placement (position and sufficient gold)
	Takes in 3 arguments:
	towerName - string specifying what tower is being placed
	gridPosition - top left grid block of where the tower would be placed
	towerCoordinates - top left coordinate of a tower
	Returns an object with a boolean to represent whether the tower is placed and an error message if the tower was not placed
	*/
	GameEngine.prototype.placeTower = function (towerName, gridPosition, towerCoordinates) {
	    var goldCost = towerData[towerName].goldCost;
	    // Validate tower placement
	    if (this.validateTowerPlacement(gridPosition) && this.checkGold(goldCost)) {
	        this.addTower(towerName, towerCoordinates, gridPosition, goldCost);
	        return { placed: true };
	    } else {
	        if (!this.validateTowerPlacement(gridPosition)) {
	            return {
	                placed: false,
	                message: constants.MESSAGEINVALIDPLACEMENT
	            };
	        } else {
	            return {
	                placed: false,
	                message: constants.MESSAGENOTENOUGHGOLD
	            };
	        }
	    }
	};
	
	GameEngine.prototype.render = function () {
	
	    if (this.gameState === "playing") {
	        // send state to the display object to render
	        dynamicContext.beginPath();
	        dynamicContext.clearRect(0, 0, dynamicCanvas.width, dynamicCanvas.height);
	
	        // Render towers first so that if monsters are larger they show above towers
	        this.towers.forEach(function (tower) {
	            tower.draw();
	        });
	
	        //  loop through list of active monsters and render them
	        //  TODO probably need to find a better way to rend them apart from random rectangle
	        this.activeMonsters.forEach(function (activeMonster) {
	            activeMonster.draw();
	
	            // Renders projectile animations that are active for each monster
	            activeMonster.projectiles.forEach(function (projectile) {
	                projectile.draw(activeMonster.position);
	            });
	        });
	
	        dynamicContext.closePath();
	    } else if (this.gameState === "lost") {
	        // Add render method to add thing
	        console.log("you lost lol");
	    } else if (this.gameState === "won") {
	        // Add render method to add thing
	        console.log("congrats you won");
	    }
	};
	
	// Changed values to be based off dt (change in time since last render)
	GameEngine.prototype.runCycle = function (dt) {
	    var _this = this;
	
	    this.checkGameState();
	
	    if (this.gameState === "playing") {
	        // loop through active monsters and towers and run the cycle
	        // Each runCycle method returns information for the gameEngine to
	        // process (e.g. the monster died, tower changed)
	
	        // Adds monsters if there are monsters to create - creates 10 per level
	        if (this.monstersToCreate > 0) {
	            //  timer to add monsters
	            this.timer -= dt;
	            if (this.timer <= 0) {
	                this.addMonster(this.level); // send through the level number
	                this.timer = constants.TIMEBETWEENMONSTERCREATE; // Every 1 second create a new monster
	                this.monstersToCreate--;
	                this.nextLevelCalled = false;
	            }
	        }
	
	        // Calls the next level if all the monsters are dead - TODO add a delay to space out between levels
	        // Checks whether there are any monsters left and whether all the monsters have been created
	        if (this.activeMonsters.length === 0 && this.monstersToCreate === 0) {
	            if (!this.nextLevelCalled) {
	                setTimeout(function () {
	                    _this.nextLevel();
	                }, constants.TIMEBETWEENLEVELS * 1000);
	
	                this.nextLevelCalled = true;
	            }
	        } else {
	            this.activeMonsters.forEach(function (activeMonster, i, monsterArray) {
	                // moves the monsters and checks whether they get to the end of the cycle
	                // also factor to have a projectiles array - which means that each cycle for monsters they will take damage
	                activeMonster.runCycle(_this.gamePath, dt);
	
	                // Handles external effects to the monsters (splash and bounce effects)
	                _this.handleEffects(activeMonster, i);
	
	                var monsterStatus = activeMonster.checkDeath();
	
	                if (!monsterStatus.alive) {
	                    if (monsterStatus.giveGold) {
	                        _this.userGold += activeMonster.bounty;
	                    } else {
	                        _this.userLives--;
	                    }
	                    var monsterDeath = new CustomEvent("unitRemoved", { "detail": { index: i, element: "monster" } });
	                    document.dispatchEvent(monsterDeath);
	                    monsterArray.splice(i, 1);
	                }
	            });
	
	            // Run tower cycles here - pass in active monsters - towers only create projectiles
	            this.towers.forEach(function (tower) {
	                tower.runCycle(_this.activeMonsters, dt); // Pass in active monsters and attach projectiles to them
	            });
	        }
	    }
	};
	
	GameEngine.prototype.sellTower = function (towerIndex) {
	    var gridPosition = utils.convertToBlock(this.towers[towerIndex].position),
	        towerDeath = new CustomEvent("unitRemoved", { "detail": { index: towerIndex, element: "tower" } }),
	        sellPrice = Math.floor(this.towers[towerIndex].totalCost * 0.75);
	    // Dispatch the tower death event for the ui to update
	    document.dispatchEvent(towerDeath);
	
	    this.userGold += sellPrice;
	    this.towers.splice(towerIndex, 1);
	
	    // Remove tower from the game grid
	    this.gameGrid[gridPosition.x][gridPosition.y].empty = true;
	    this.gameGrid[gridPosition.x + 1][gridPosition.y].empty = true;
	    this.gameGrid[gridPosition.x][gridPosition.y + 1].empty = true;
	    this.gameGrid[gridPosition.x + 1][gridPosition.y + 1].empty = true;
	    return sellPrice;
	};
	
	GameEngine.prototype.upgradeTower = function (towerIndex, upgradeName) {
	    // Check for sufficient gold
	    if (towerData[upgradeName].goldCost > this.userGold) {
	        return false;
	    } else {
	        // Create a the upgraded tower at the same position and replace that in the towers array
	        var upgradedTower = new Tower(this.towers[towerIndex].position, upgradeName);
	        this.userGold -= towerData[upgradeName].goldCost;
	        this.towers.splice(towerIndex, 1, upgradedTower);
	        return true;
	    }
	};
	
	/*
	Takes in a gridPosition object (points to the top left corner of the tower)
	Towers take up a 2x2 grid - this function checks all positions
	Returns true if the position is a valid placement for a tower
	Returns false if the position is invalid
	*/
	GameEngine.prototype.validateTowerPlacement = function (gridPosition) {
	    // Checks all 4 positions
	    var positionValid = this.gameGrid[gridPosition.x][gridPosition.y].empty && this.gameGrid[gridPosition.x + 1][gridPosition.y].empty && this.gameGrid[gridPosition.x][gridPosition.y + 1].empty && this.gameGrid[gridPosition.x + 1][gridPosition.y + 1].empty;
	    return positionValid;
	};
	
	/*
	Input: Path - an array of objects containing coordinates where the path will run to
	Output: pathLines - an array of objects containing the startPoint (coordinates),
	        distance of the line and direction (left, right, up, down)
	*/
	function _convertPathToLines(path) {
	    var pathLines = [];
	    for (var i = 0; i < path.length - 1; i++) {
	        var line = {};
	
	        // Assume that the direction is only 4 ways
	        if (path[i + 1].x - path[i].x === 0) {
	
	            if (path[i + 1].y - path[i].y > 0) {
	                line.direction = "down";
	            } else {
	                line.direction = "up";
	            }
	        } else {
	            if (path[i + 1].x - path[i].x === 0 > 0) {
	                line.direction = "left";
	            } else {
	                line.direction = "right";
	            }
	        }
	        line.startPoint = path[i];
	        line.distance = utils.getPositionDifference(path[i], path[i + 1]);
	        pathLines.push(line);
	    }
	
	    return pathLines;
	}
	
	/*
	Converts a pathLines array (an array of objects with a startPoint,
	direction and a distance) into an array of grid blocks ()
	Note that there will be some overlap with blocks, however,
	as they are only used to set grid positions to not empty, overlap is not an issue
	*/
	function _createPathBlocks(pathLines) {
	    var blocks = [];
	    // Loops through all the pathLines and creates blocks based on that
	    for (var i = 0; i < pathLines.length; i++) {
	        // blockAmount refers to the amount of blocks that follow the path
	        var blockAmount = Math.floor(pathLines[i].distance / constants.GRIDSIZE) + 1,
	            pathDirection;
	        /* Set direction
	        x: 1 = right
	        x: -1 = left
	        y: 1 = down
	        y: -1 = up
	        Offset values help center the grid blocks (i.e. inline with the direction)
	        Side values are used to define which side the blocks are on relative to
	        the path direction (i.e. horizontally or vertically)
	        */
	        switch (pathLines[i].direction) {
	            case "up":
	                pathDirection = {
	                    x: 0,
	                    y: -1,
	                    xSide: constants.GRIDSIZE / 2,
	                    ySide: 0
	                };
	                break;
	            case "down":
	                pathDirection = {
	                    x: 0,
	                    y: 1,
	                    xSide: constants.GRIDSIZE / 2,
	                    ySide: 0
	                };
	                break;
	            case "left":
	                pathDirection = {
	                    x: -1,
	                    y: 0,
	                    xSide: 0,
	                    ySide: constants.GRIDSIZE / 2
	                };
	                break;
	            case "right":
	                pathDirection = {
	                    x: 1,
	                    y: 0,
	                    xSide: 0,
	                    ySide: constants.GRIDSIZE / 2
	                };
	                break;
	            default:
	                throw new Error("Invalid direction provided in pathLines");
	        }
	
	        /*
	        Creates block equal to double the amount of the blockAmount (the equivalent amount of blocks to the path distance)
	        blockBefore refers to blocks either to the left or top of the path
	        blockAfter refers to blocks either to the right or below of the path
	        Creates block locations and gives them offsets to their center positions (for clarity in converting to blocks)
	        */
	        for (var j = 0; j < blockAmount; j++) {
	
	            var blockBefore = {
	
	                x: pathLines[i].startPoint.x - pathDirection.xSide + pathDirection.x * constants.GRIDSIZE * j + pathDirection.x * constants.GRIDSIZE / 2, // Adds a slight offset
	
	                y: pathLines[i].startPoint.y - pathDirection.ySide + pathDirection.y * constants.GRIDSIZE * j + pathDirection.y * constants.GRIDSIZE / 2 // Adds a slight offset
	
	            },
	                blockAfter = {
	                x: pathLines[i].startPoint.x + pathDirection.xSide + pathDirection.x * constants.GRIDSIZE * j + pathDirection.x * constants.GRIDSIZE / 2, // Adds a slight offset
	
	                y: pathLines[i].startPoint.y + pathDirection.ySide + pathDirection.y * constants.GRIDSIZE * j + pathDirection.y * constants.GRIDSIZE / 2 // Adds a slight offset
	            };
	            // Edge case for when the path exits the screen (there is definitely a better way to handle this)
	            // This is such a bad solution lol.
	            if (blockBefore.x < constants.CANVASWIDTH && blockBefore.y < constants.CANVASHEIGHT) {
	                blocks.push(utils.convertToBlock(blockBefore));
	            }
	            if (blockAfter.x < constants.CANVASWIDTH && blockAfter.y < constants.CANVASHEIGHT) {
	                blocks.push(utils.convertToBlock(blockAfter));
	            }
	        }
	    }
	
	    return blocks;
	}
	
	// Grid is 36 by 24
	// can be initiated by [x][y] - each block has a boolean to represent whether something is there
	function _initiateGrid(pathLines) {
	    var grid = [],
	        blocks = _createPathBlocks(pathLines),
	        xGridAmount = constants.CANVASWIDTH / constants.GRIDSIZE,
	        yGridAmount = constants.CANVASHEIGHT / constants.GRIDSIZE;
	
	    // Create the grid
	    for (var x = 0; x < xGridAmount; x++) {
	        grid[x] = [];
	        for (var y = 0; y < yGridAmount; y++) {
	            grid[x][y] = {
	                empty: true
	            };
	        }
	    }
	    // Loop through the blocks (which are on the path) and
	    blocks.forEach(function (block) {
	        grid[block.x][block.y] = {
	            empty: false
	        };
	    });
	
	    return grid;
	};
	
	module.exports = GameEngine;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var monsterData = __webpack_require__(11),
	    utils = __webpack_require__(6),
	    constants = __webpack_require__(7);
	
	var Monster = function Monster(id, multiplier) {
	    this.id = id;
	    this.currentHp = Math.floor(monsterData[id].maxHp * multiplier);
	    this.maxHp = Math.floor(monsterData[id].maxHp * multiplier);
	    this.baseMs = monsterData[id].baseMs; // Movement speed - "units" per second
	    this.type = monsterData[id].type;
	    this.bounty = Math.floor(monsterData[id].bounty * multiplier);
	    this.projectiles = [];
	    this.distanceTravelled = 0;
	    this.position = {}; // Initial position is defined by the path
	    this.sideLength = constants.MONSTERLENGTH;
	    this.effects = {};
	};
	// Method the game object uses to move monsters
	Monster.prototype.runCycle = function (gamePath, dt) {
	    var _this = this;
	
	    this.move(gamePath, dt);
	
	    this.projectiles.forEach(function (projectile, i, projectileArray) {
	        projectile.move(dt);
	        if (projectile.end) {
	            // Object.assign doesn't do deep merge - only need to go one level down to prevent reference copying
	            for (var key in projectile.effects) {
	                // TODO figure out how to prioritize multiple effects with different values, e.g. two slows with 0.5 and 0.2 (prioritize the higher one)
	
	                _this.effects[key] = Object.assign({}, projectile.effects[key]);
	            }
	
	            // Copy over ID so game can create antoher projectile for bounce
	            if (_this.effects.hasOwnProperty("bounce")) {
	                _this.effects.bounce.id = projectile.id;
	            }
	
	            _this.updateHp(-projectile.damage);
	            projectileArray.splice(i, 1);
	        }
	    });
	
	    // Handle effects here and timers
	    this.handleEffects(dt);
	};
	
	Monster.prototype.draw = function () {
	    dynamicContext.beginPath();
	    dynamicContext.rect(this.position.x, this.position.y, constants.MONSTERLENGTH, constants.MONSTERLENGTH);
	    dynamicContext.stroke();
	    dynamicContext.fillStyle = "red";
	    dynamicContext.fillRect(this.position.x, this.position.y + constants.MONSTERLENGTH / 3, constants.MONSTERLENGTH * this.currentHp / this.maxHp, constants.MONSTERLENGTH / 3);
	    dynamicContext.closePath();
	};
	
	Monster.prototype.checkDeath = function () {
	    var status = {};
	
	    if (this.currentHp <= 0 || this.position.end) {
	        status.alive = false;
	        status.giveGold = !this.position.end; // Does not give gold if the monster reached the end
	    } else {
	        status.alive = true;
	    }
	    return status;
	};
	
	Monster.prototype.handleEffects = function (dt) {
	    // Loop through all the effects on the monster
	    // Effects to handle: splash, slow, freeze, dot, amplify, bounce
	    for (var key in this.effects) {
	        switch (key) {
	            case "freeze":
	                if (Math.random() < this.effects.freeze.chance) {
	                    this.effects.frozen = {
	                        timer: this.effects.freeze.timer
	                    };
	                }
	                delete this.effects[key];
	                break;
	            case "splash":
	                // These are handled in the game.runCycle method
	                break;
	            case "bounce":
	                // These are handled in the game.runCycle method
	                break;
	            case "dot":
	                this.updateHp(this.effects[key].amount * dt * -1);
	            case "slow":
	            case "amplify":
	            case "frozen":
	                // Reduce timer
	                this.effects[key].timer -= dt;
	                if (this.effects[key].timer < 0) {
	                    delete this.effects[key];
	                }
	                break;
	            default:
	                console.log(key, "unexpected key in effects object");
	        }
	    }
	};
	
	Monster.prototype.move = function (pathLines, dt) {
	    var modifier = 1;
	
	    // Freeze is priority over slow (should be highest to lowest)
	    if (this.effects.hasOwnProperty("freeze")) {
	        modifier = 0;
	    } else if (this.effects.hasOwnProperty("slow")) {
	        modifier = 1 - this.effects.slow.amount;
	    }
	
	    this.distanceTravelled += this.baseMs * dt * modifier;
	    this.position = utils.convertDistanceToCoordinates(this.distanceTravelled, pathLines);
	};
	
	// Can take in a positive or negative number
	Monster.prototype.updateHp = function (hpChange) {
	    var modifier = 1;
	
	    // Only amplifies damage if the monster is taking damage
	    if (hpChange < 0 && this.effects.hasOwnProperty("amplify")) {
	        modifier = this.effects.amplify.amount;
	    }
	
	    this.currentHp += hpChange * modifier;
	
	    if (this.currentHp > this.maxHp) {
	        this.currentHp = this.maxHp;
	    }
	};
	
	module.exports = Monster;

/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = {
	    basic: {
	        maxHp: 30,
	        baseMs: 50, // pixels per second
	        type: "normal", // Change this type later
	        bounty: 3
	    },
	    fast: {
	        maxHp: 30,
	        baseMs: 100, // pixels per second
	        type: "normal", // Change this type later
	        bounty: 4
	    },
	    tank: {
	        maxHp: 60,
	        baseMs: 30,
	        type: "normal",
	        bounty: 4
	    },
	    fire: {
	        maxHp: 30,
	        baseMs: 70,
	        type: "fire",
	        bounty: 4
	    },
	    ice: {
	        maxHp: 45,
	        baseMs: 40,
	        type: "ice",
	        bounty: 5
	    },
	    light: {
	        maxHp: 20,
	        baseMs: 100,
	        type: "light",
	        bounty: 4
	    },
	    boss1: {
	        maxHp: 500,
	        baseMs: 80,
	        type: "normal",
	        bounty: 20
	    },
	    boss2: {
	        maxHp: 1500,
	        baseMs: 80,
	        type: "fire",
	        bounty: 40
	    },
	    boss3: {
	        maxHp: 2500,
	        baseMs: 100,
	        type: "fire",
	        bounty: 100
	    },
	    boss4: {
	        maxHp: 4500,
	        baseMs: 85,
	        type: "fire",
	        bounty: 40
	    },
	    boss5: {
	        maxHp: 6000,
	        baseMs: 95,
	        type: "fire",
	        bounty: 40
	    }
	};

/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";
	
	var exportData = [],
	    currentLevel,
	    monsterLookup = [{
	    type: "basic",
	    amount: 10
	}, {
	    type: "fire",
	    amount: 10
	}, {
	    type: "ice",
	    amount: 8
	}, {
	    type: "light",
	    amount: 10
	}, {
	    type: "tank",
	    amount: 12
	}, {
	    type: "fast",
	    amount: 15
	}];
	
	for (var i = 0; i < 50; i++) {
	    switch (i) {
	        case 10:
	            currentLevel = {
	                type: "boss1",
	                amount: 4
	            };
	            break;
	        case 20:
	            currentLevel = {
	                type: "boss2",
	                amount: 2
	            };
	            break;
	        case 30:
	            currentLevel = {
	                type: "boss3",
	                amount: 2
	            };
	            break;
	        case 40:
	            currentLevel = {
	                type: "boss4",
	                amount: 3
	            };
	            break;
	        case 50:
	            currentLevel = {
	                type: "boss5",
	                amount: 3
	            };
	            break;
	        default:
	            currentLevel = monsterLookup[i % 6];
	    }
	    exportData.push(currentLevel);
	}
	module.exports = exportData;

/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = {
	    path: [{ x: 0, y: 500 }, { x: 75, y: 500 }, { x: 75, y: 100 }, { x: 225, y: 100 }, { x: 225, y: 500 }, { x: 375, y: 500 }, { x: 375, y: 100 }, { x: 525, y: 100 }, { x: 525, y: 500 }, { x: 675, y: 500 }, { x: 675, y: 100 }, { x: 825, y: 100 }, { x: 825, y: 500 }, { x: 900, y: 500 }]
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,